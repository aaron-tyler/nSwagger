//nSwaggerVersion:0.0.4
// This file was automatically generated by nSwagger. Changes made to this file will be lost if nSwagger is run again. See https://github.com/rmaclean/nswagger for more information.
// This file was last generated at: 2016-03-15T14:14:34.1336794Z
namespace nSwagger
{
    using Newtonsoft.Json;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading;
    using System.Threading.Tasks;

    public class BookClubbingAPI
    {
        private readonly string url;
        private readonly ISwaggerHTTPClient httpClient;
        public BookClubbingAPI(string url = null, ISwaggerHTTPClient httpClient = null)
        {
            if (!string.IsNullOrWhiteSpace(url))
            {
                this.url = url;
            }
            else
            {
                this.url = "http://localhost:3832";
            }

            if (httpClient == null)
            {
                this.httpClient = new SwaggerHTTPClient();
            }
            else
            {
                this.httpClient = httpClient;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ResendPinRequest
        {
            public string Email
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AuthRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ImageParameters
        {
            public int Height
            {
                get;
                set;
            }

            public int Width
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class BookItem
        {
            public string AffiliateLink
            {
                get;
                set;
            }

            public string Author
            {
                get;
                set;
            }

            public DateTime CheckedOut
            {
                get;
                set;
            }

            public string CheckedOutToId
            {
                get;
                set;
            }

            public string CheckedOutToName
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }

            public GenreResponseItem[] Genres
            {
                get;
                set;
            }

            public string GoodReadsId
            {
                get;
                set;
            }

            public string GutenburgId
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public string ImageUrl
            {
                get;
                set;
            }

            public bool InOwnCollection
            {
                get;
                set;
            }

            public string ISBN10
            {
                get;
                set;
            }

            public string ISBN13
            {
                get;
                set;
            }

            public string LCCN
            {
                get;
                set;
            }

            public string LibraryThingId
            {
                get;
                set;
            }

            public string OCLC
            {
                get;
                set;
            }

            public string OpenLibraryId
            {
                get;
                set;
            }

            public enum BookItemResourceAddedMethod
            {
                Scanned,
                AddedManually
            }

            public BookItemResourceAddedMethod ResourceAddedMethod
            {
                get;
                set;
            }

            public enum BookItemResourceCondition
            {
                New,
                Used,
                Damaged
            }

            public BookItemResourceCondition ResourceCondition
            {
                get;
                set;
            }

            public string ResourceId
            {
                get;
                set;
            }

            public string ResourceTag
            {
                get;
                set;
            }

            public string SubTitle
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class GenreResponseItem
        {
            public object Aliases
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FilterParameters
        {
            public int Skip
            {
                get;
                set;
            }

            public int Top
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CumulitiveRatingResponse
        {
            public bool NotEnoughRatings
            {
                get;
                set;
            }

            public RatingResponse[] Ratings
            {
                get;
                set;
            }

            public double Score
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RatingResponse
        {
            public BookItem Book
            {
                get;
                set;
            }

            public string Note
            {
                get;
                set;
            }

            public int Rating
            {
                get;
                set;
            }

            public enum RatingResponseType
            {
                Book
            }

            public RatingResponseType Type
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class Top10ResponseItem
        {
            public BookItem Book
            {
                get;
                set;
            }

            public double Rating
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddBookToRequest
        {
            public bool AddToClub
            {
                get;
                set;
            }

            public string BookId
            {
                get;
                set;
            }

            public string ClubID
            {
                get;
                set;
            }

            public enum AddBookToRequestCondition
            {
                New,
                Used,
                Damaged
            }

            public AddBookToRequestCondition Condition
            {
                get;
                set;
            }

            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public string Tag
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class BookSearchRequest
        {
            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public string Query
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class BookCreateRequest
        {
            public string Author
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }

            public int[][] Genres
            {
                get;
                set;
            }

            public string GoodReadsId
            {
                get;
                set;
            }

            public string GutenburgId
            {
                get;
                set;
            }

            public string ImageUrl
            {
                get;
                set;
            }

            public string ISBN10
            {
                get;
                set;
            }

            public string ISBN13
            {
                get;
                set;
            }

            public string LCCN
            {
                get;
                set;
            }

            public string LibraryThingId
            {
                get;
                set;
            }

            public string OCLC
            {
                get;
                set;
            }

            public string OpenLibraryId
            {
                get;
                set;
            }

            public string SubTitle
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ReadResponseItem
        {
            public BookItem Book
            {
                get;
                set;
            }

            public DateTime When
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfReadResponseItem
        {
            public ReadResponseItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class Position
        {
            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfClubGetMemberResponse
        {
            public ClubGetMemberResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubGetMemberResponse
        {
            public UserResponse Member
            {
                get;
                set;
            }

            public enum ClubGetMemberResponseRelationshipType
            {
                Admin,
                Member,
                Follower
            }

            public ClubGetMemberResponseRelationshipType RelationshipType
            {
                get;
                set;
            }

            public bool Self
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UserResponse
        {
            public int DayOfBirth
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public DateTime JoinedOn
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public int MonthOfBirth
            {
                get;
                set;
            }

            public string PhotoURL
            {
                get;
                set;
            }

            public bool ShareClubs
            {
                get;
                set;
            }

            public bool ShareEmail
            {
                get;
                set;
            }

            public bool ShareMyBooks
            {
                get;
                set;
            }

            public bool ShareRatings
            {
                get;
                set;
            }

            public bool ShareReads
            {
                get;
                set;
            }

            public bool ShareReservations
            {
                get;
                set;
            }

            public bool ShareWishlist
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public bool UseGravatar
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }

            public int YearOfBirth
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ChangeRoleRequest
        {
            public bool Admin
            {
                get;
                set;
            }

            public string UserId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubSearchRequest
        {
            public string Query
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfClubResponseItem
        {
            public ClubResponseItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubResponseItem
        {
            public string Id
            {
                get;
                set;
            }

            public string ClubName
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubGetResponse
        {
            public enum ClubGetResponseAddToBoxRule
            {
                ClubAdminsOnly,
                AllClubMembers
            }

            public ClubGetResponseAddToBoxRule AddToBoxRule
            {
                get;
                set;
            }

            public int BookCount
            {
                get;
                set;
            }

            public bool CanFollow
            {
                get;
                set;
            }

            public enum ClubGetResponseClubType
            {
                BookClub
            }

            public ClubGetResponseClubType ClubType
            {
                get;
                set;
            }

            public enum ClubGetResponseCommunicationStyle
            {
                Formal,
                Informal
            }

            public ClubGetResponseCommunicationStyle CommunicationStyle
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string FacebookPage
            {
                get;
                set;
            }

            public int FollowerCount
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public int MemberCount
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum ClubGetResponsePrivacyLevel
            {
                Public,
                Hidden
            }

            public ClubGetResponsePrivacyLevel PrivacyLevel
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public bool SeeFollowers
            {
                get;
                set;
            }

            public bool SeeMembers
            {
                get;
                set;
            }

            public enum ClubGetResponseStyle
            {
                SingleRead,
                MultiRead
            }

            public ClubGetResponseStyle Style
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubUpdateRequest
        {
            public bool SeeFollowers
            {
                get;
                set;
            }

            public bool SeeMembers
            {
                get;
                set;
            }

            public enum ClubUpdateRequestAddToBoxRule
            {
                ClubAdminsOnly,
                AllClubMembers
            }

            public ClubUpdateRequestAddToBoxRule AddToBoxRule
            {
                get;
                set;
            }

            public bool CanFollow
            {
                get;
                set;
            }

            public enum ClubUpdateRequestClubStyle
            {
                SingleRead,
                MultiRead
            }

            public ClubUpdateRequestClubStyle ClubStyle
            {
                get;
                set;
            }

            public enum ClubUpdateRequestCommunicationStyle
            {
                Formal,
                Informal
            }

            public ClubUpdateRequestCommunicationStyle CommunicationStyle
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string FacebookPage
            {
                get;
                set;
            }

            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum ClubUpdateRequestPrivacyLevel
            {
                Public,
                Hidden
            }

            public ClubUpdateRequestPrivacyLevel PrivacyLevel
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubCreateRequest
        {
            public enum ClubCreateRequestAddToBoxRule
            {
                ClubAdminsOnly,
                AllClubMembers
            }

            public ClubCreateRequestAddToBoxRule AddToBoxRule
            {
                get;
                set;
            }

            public bool CanFollow
            {
                get;
                set;
            }

            public enum ClubCreateRequestClubStyle
            {
                SingleRead,
                MultiRead
            }

            public ClubCreateRequestClubStyle ClubStyle
            {
                get;
                set;
            }

            public enum ClubCreateRequestCommunicationStyle
            {
                Formal,
                Informal
            }

            public ClubCreateRequestCommunicationStyle CommunicationStyle
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string FacebookPage
            {
                get;
                set;
            }

            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum ClubCreateRequestPrivacyLevel
            {
                Public,
                Hidden
            }

            public ClubCreateRequestPrivacyLevel PrivacyLevel
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfClubInviteItem
        {
            public ClubInviteItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubInviteItem
        {
            public string ClubId
            {
                get;
                set;
            }

            public string ClubName
            {
                get;
                set;
            }

            public string InviteId
            {
                get;
                set;
            }

            public string Message
            {
                get;
                set;
            }

            public string RecipientFullName
            {
                get;
                set;
            }

            public string RecipientId
            {
                get;
                set;
            }

            public bool Seen
            {
                get;
                set;
            }

            public string SenderFullName
            {
                get;
                set;
            }

            public string SenderId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddClubInviteRequest
        {
            public string Message
            {
                get;
                set;
            }

            public string UserId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubJoinRequest
        {
            public string Club
            {
                get;
                set;
            }

            public string Invite
            {
                get;
                set;
            }

            public bool JustFollow
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfBookItem
        {
            public BookItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class EventItem
        {
            public string City
            {
                get;
                set;
            }

            public string ClubId
            {
                get;
                set;
            }

            public string ClubName
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }

            public DateTime EndDate
            {
                get;
                set;
            }

            public string EventId
            {
                get;
                set;
            }

            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public string OwnerId
            {
                get;
                set;
            }

            public string OwnerName
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public string Street1
            {
                get;
                set;
            }

            public string Street2
            {
                get;
                set;
            }

            public string Street3
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class EventCreateRequest
        {
            public string City
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }

            public DateTime EndDate
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public string Street1
            {
                get;
                set;
            }

            public string Street2
            {
                get;
                set;
            }

            public string Street3
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfEventItem
        {
            public EventItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ForgotPasswordRequest
        {
            public string Email
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CreateGenreAlias
        {
            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class GenreCreateRequest
        {
            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class SystemStatus
        {
            public bool SystemUp
            {
                get;
                set;
            }

            public string Version
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class OAuthRequest
        {
            public enum OAuthRequestSource
            {
                Facebook,
                PIntrest
            }

            public OAuthRequestSource Source
            {
                get;
                set;
            }

            public string Token
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddRatingRequest
        {
            public string Notes
            {
                get;
                set;
            }

            public int Rating
            {
                get;
                set;
            }

            public string ThingId
            {
                get;
                set;
            }

            public enum AddRatingRequestThingType
            {
                Book
            }

            public AddRatingRequestThingType ThingType
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UpdateRatingRequest
        {
            public string Notes
            {
                get;
                set;
            }

            public int Rating
            {
                get;
                set;
            }

            public string ThingId
            {
                get;
                set;
            }

            public enum UpdateRatingRequestThingType
            {
                Book
            }

            public UpdateRatingRequestThingType ThingType
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RegistrationConfirmRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string PIN
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfReservationResponseItem
        {
            public ReservationResponseItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ReservationResponseItem
        {
            public string Id
            {
                get;
                set;
            }

            public DateTime ReservedOn
            {
                get;
                set;
            }

            public Book Book
            {
                get;
                set;
            }

            public enum ReservationResponseItemThingType
            {
                Book
            }

            public ReservationResponseItemThingType ThingType
            {
                get;
                set;
            }

            public bool UserHidden
            {
                get;
                set;
            }

            public string UserId
            {
                get;
                set;
            }

            public string UserName
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class Book
        {
            public string Author
            {
                get;
                set;
            }

            public string Description
            {
                get;
                set;
            }

            public Genre[] Genres
            {
                get;
                set;
            }

            public string GoodReadsId
            {
                get;
                set;
            }

            public string GutenburgId
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public string ImageUrl
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public string ImageBasePath
            {
                get;
                set;
            }

            public string ISBN10
            {
                get;
                set;
            }

            public string ISBN13
            {
                get;
                set;
            }

            public string LCCN
            {
                get;
                set;
            }

            public string LibraryThingId
            {
                get;
                set;
            }

            public string OCLC
            {
                get;
                set;
            }

            public string OpenLibraryId
            {
                get;
                set;
            }

            public enum BookState
            {
                Active
            }

            public BookState State
            {
                get;
                set;
            }

            public string SubTitle
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class Genre
        {
            public int Id
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum GenreState
            {
                Active
            }

            public GenreState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ReserveRequest
        {
            public string ResourceId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class PasswordResetRequest
        {
            public string Token
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }

            public string PasswordConfirm
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ResourceItem
        {
            public BookItem Book
            {
                get;
                set;
            }

            public enum ResourceItemType
            {
                Book
            }

            public ResourceItemType Type
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ResourceCollection
        {
            public CollectionResponseOfBookItem Books
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfRSVPItem
        {
            public RSVPItem[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RSVPItem
        {
            public string ClubId
            {
                get;
                set;
            }

            public DateTime EndDate
            {
                get;
                set;
            }

            public string EventId
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public enum RSVPItemRSVP
            {
                Going,
                NotGoing,
                Maybe
            }

            public RSVPItemRSVP RSVP
            {
                get;
                set;
            }

            public DateTime RSVPOn
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public string UserId
            {
                get;
                set;
            }

            public string UsersName
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RSVPRequest
        {
            public string EventId
            {
                get;
                set;
            }

            public enum RSVPRequestRSVP
            {
                Going,
                NotGoing,
                Maybe
            }

            public RSVPRequestRSVP RSVP
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class SystemSettingItem
        {
            public string EmailFrom
            {
                get;
                set;
            }

            public string LootAffiliateCode
            {
                get;
                set;
            }

            public int MaxClubsPerUser
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class EmailItem
        {
            public string HTML
            {
                get;
                set;
            }

            public string PlainText
            {
                get;
                set;
            }

            public string Subject
            {
                get;
                set;
            }

            public enum EmailItemType
            {
                Registration,
                ForgotPassword,
                ClubInvite,
                EventInvite,
                EventUpdate
            }

            public EmailItemType Type
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class TrendingFilterParameters
        {
            public bool AgeFilter
            {
                get;
                set;
            }

            public bool DateFilter
            {
                get;
                set;
            }

            public int EndAgeRange
            {
                get;
                set;
            }

            public DateTime EndDateRange
            {
                get;
                set;
            }

            public int Limit
            {
                get;
                set;
            }

            public int StartAgeRange
            {
                get;
                set;
            }

            public DateTime StartDateRange
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfClubGetUserResponse
        {
            public ClubGetUserResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClubGetUserResponse
        {
            public enum ClubGetUserResponseRelationshipType
            {
                Admin,
                Member,
                Follower
            }

            public ClubGetUserResponseRelationshipType RelationshipType
            {
                get;
                set;
            }

            public enum ClubGetUserResponseAddToBoxRule
            {
                ClubAdminsOnly,
                AllClubMembers
            }

            public ClubGetUserResponseAddToBoxRule AddToBoxRule
            {
                get;
                set;
            }

            public int BookCount
            {
                get;
                set;
            }

            public bool CanFollow
            {
                get;
                set;
            }

            public enum ClubGetUserResponseClubType
            {
                BookClub
            }

            public ClubGetUserResponseClubType ClubType
            {
                get;
                set;
            }

            public enum ClubGetUserResponseCommunicationStyle
            {
                Formal,
                Informal
            }

            public ClubGetUserResponseCommunicationStyle CommunicationStyle
            {
                get;
                set;
            }

            public string Country
            {
                get;
                set;
            }

            public string FacebookPage
            {
                get;
                set;
            }

            public int FollowerCount
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public int MemberCount
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum ClubGetUserResponsePrivacyLevel
            {
                Public,
                Hidden
            }

            public ClubGetUserResponsePrivacyLevel PrivacyLevel
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public bool SeeFollowers
            {
                get;
                set;
            }

            public bool SeeMembers
            {
                get;
                set;
            }

            public enum ClubGetUserResponseStyle
            {
                SingleRead,
                MultiRead
            }

            public ClubGetUserResponseStyle Style
            {
                get;
                set;
            }

            public string Suburb
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfRatingResponse
        {
            public RatingResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfWishlistResponse
        {
            public WishlistResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class WishlistResponse
        {
            public BookItem Book
            {
                get;
                set;
            }

            public enum WishlistResponseType
            {
                Book
            }

            public WishlistResponseType Type
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UserFindRequest
        {
            public string Query
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfUserSearchResponse
        {
            public UserSearchResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UserSearchResponse
        {
            public string DisplayName
            {
                get;
                set;
            }

            public string PhotoUrl
            {
                get;
                set;
            }

            public string UserId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class PhotoUpload
        {
            public string Base64Data
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RegistrationRequest
        {
            public int DayOfBirth
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public enum RegistrationRequestGender
            {
                Male,
                Female,
                Unspecified
            }

            public RegistrationRequestGender Gender
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public double Latitude
            {
                get;
                set;
            }

            public double Longitude
            {
                get;
                set;
            }

            public int MonthOfBirth
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }

            public string PasswordConfirm
            {
                get;
                set;
            }

            public int YearOfBirth
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UserUpdateRequest
        {
            public int DayOfBirth
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public enum UserUpdateRequestGender
            {
                Male,
                Female,
                Unspecified
            }

            public UserUpdateRequestGender Gender
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public int MonthOfBirth
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }

            public string PasswordConfirm
            {
                get;
                set;
            }

            public bool ShareClubs
            {
                get;
                set;
            }

            public bool ShareEmail
            {
                get;
                set;
            }

            public bool ShareLocation
            {
                get;
                set;
            }

            public bool ShareMyBooks
            {
                get;
                set;
            }

            public bool ShareRatings
            {
                get;
                set;
            }

            public bool ShareReads
            {
                get;
                set;
            }

            public bool ShareReservations
            {
                get;
                set;
            }

            public bool ShareWishlist
            {
                get;
                set;
            }

            public string Twitter
            {
                get;
                set;
            }

            public bool UseGravatar
            {
                get;
                set;
            }

            public string Website
            {
                get;
                set;
            }

            public int YearOfBirth
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class WishlistAdd
        {
            public enum WishlistAddResourceType
            {
                Book
            }

            public WishlistAddResourceType ResourceType
            {
                get;
                set;
            }

            public string ThingId
            {
                get;
                set;
            }
        }

        //<summary>
        // Used to regenerate the PIN and resend it to the user
        //</summary>
        //<remarks>
        // Rules:
        //- Emailmust be specified and exist in system
        //- User must be in pending confirm
        //- can't be called more than every 5min per user
        //</remarks>
        //<returns>
        // Will always return this, even if the user doesn't meet requirements so we do not disclose users.
        //</returns>
        //<param name="request">Email</param>
        public async Task<APIResponse<object>> Auth_PostResendRegistrationPinAsync(ResendPinRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/registrationpin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to login to the service using an email/password.
        //</summary>
        //<remarks>
        // Rules:
        //- User cannot already be logged in.
        //- Email &amp; Password must be specified
        //- User must be active in system.
        //- Any existing sessions will be abandoned. This means a user cannot sign in from multiple devices.
        //</remarks>
        //<returns>
        // {System.Guid}
        //</returns>
        //<param name="request">Email &amp; Password</param>
        public async Task<APIResponse<string>> Auth_PostAsync(AuthRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Auth", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<BookItem>> Book_GetBookAdminAsync(string oauthToken, string id, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/admin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<BookItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<BookItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<BookItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<BookItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets ratings for a book
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- There must be at least 3 ratings for a book
        //- Result will include random top rating (&gt;=4) and random bottom rating (&lt;=2)
        //Algorithm
        //- Standard average algorithm
        //</remarks>
        //<returns>
        // {API.Models.CumulitiveRatingResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CumulitiveRatingResponse>> Book_GetRatingsAsync(string oauthToken, string id, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/" + id + "/ratings", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CumulitiveRatingResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CumulitiveRatingResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CumulitiveRatingResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CumulitiveRatingResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CumulitiveRatingResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Returns the top 10 books in the system
        //</summary>
        //<remarks>
        // Uses a basic averaging of books.
        //</remarks>
        //<returns>
        // {Top10ResponseItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<Top10ResponseItem[]>> Book_GetTop10Async(string oauthToken, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/top10", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<Top10ResponseItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<Top10ResponseItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<Top10ResponseItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<Top10ResponseItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add a book to the system and optionally add a book to a club too by providing the book ID. This will be used for barcodes too as they are ISBNs too.
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in.
        //- If Add to club, then Club must be active
        //- User must be active
        //- User cannot be a follower
        //- if the add to box rule is "all members" then the user can be a member or admin.
        //- If the add to box rule is "admin only" then the user must be an admin.
        //- The services used for lookup of book details, at least one must find it.
        //- Location is optional
        //</remarks>
        //<returns>
        // {API.Models.BookItem}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<BookItem>> Book_PostAsync(string oauthToken, AddBookToRequest request, int height, int width)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/book/add", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<BookItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<BookItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<BookItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<BookItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<BookItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<BookItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Looks up the book based on the query.
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in.
        //- The ISBN must validate as a valid ISBN10 or ISBN13 number.
        //- The services used for lookup of book details, at least one must find it.
        //</remarks>
        //<returns>
        // {BookItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="latitude"></param>
        //<param name="longitude"></param>
        //<param name="query"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<BookItem[]>> Book_GetAsync(string oauthToken, double latitude, double longitude, string query, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Book", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<BookItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<BookItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<BookItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Ability to lookup a book to the database manually,
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in.
        //- User must be a system admin.
        //- ISBN 10 or ISBN 13 must be provided
        //- ISBN cannot exist in system yet
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<string>> Book_PostAdminAsync(string oauthToken, BookCreateRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Book", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Ability to get a book from the database manually, for admins only
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in.
        //- User must be a system admin.
        //- ISBN 10 or ISBN 13 must be provided
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<string>> Book_PutBookUpdateAdminAsync(string oauthToken, string id, BookCreateRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Book/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to remove a book as read
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> BookRead_DeleteReadAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/book/read/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to specific item
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.ReadResponseItem}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<ReadResponseItem>> BookRead_GetSingleReadAsync(string oauthToken, string id, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/read/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ReadResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<ReadResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ReadResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ReadResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ReadResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to the current users reads of a book
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CollectionResponseOfReadResponseItem>> BookRead_GetAsync(string oauthToken, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/read", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfReadResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfReadResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfReadResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfReadResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfReadResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add a book as read
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Book must exist and be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="location"></param>
        public async Task<APIResponse<object>> BookRead_PostReadAsync(string oauthToken, string id, Position location)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/book/" + id + "/read", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(location)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the members of a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in
        //- Club must be active
        //- User must be a follower, member, admin or have an active invite for a private club
        //- Club will always show admins for a club in the response
        //- Club will only show members, if the see members' option is enabled on the club
        //- Club will only show followers, if the see followers option is enabled on the club
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="memberType"></param>
        //<param name="excludeSelf"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CollectionResponseOfClubGetMemberResponse>> Club_GetMembersAsync(string oauthToken, string id, string memberType, bool excludeSelf, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/members", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubGetMemberResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfClubGetMemberResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubGetMemberResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubGetMemberResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubGetMemberResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject < CollectionResponse[ClubGetMemberResponse] > (await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubGetMemberResponse>(data: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubGetMemberResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Returns the top 10 books in the club
        //</summary>
        //<remarks>
        // Uses a basic averaging of books.
        //</remarks>
        //<returns>
        // {Top10ResponseItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<Top10ResponseItem[]>> Club_GetTop10Async(string oauthToken, string id, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/book/top10", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<Top10ResponseItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<Top10ResponseItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<Top10ResponseItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<Top10ResponseItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows a club to change the role of a member
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be logged in
        //- Club exists and is active
        //- Calling user cannot change their own role in a club
        //- Calling user must be an admin of a club
        //- Target user must exist &amp; be active
        //- Target user must be an existing member or admin of a club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="changeRoleRequest"></param>
        public async Task<APIResponse<object>> Club_PostChangeUsersRoleAsync(string oauthToken, string id, ChangeRoleRequest changeRoleRequest)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/changeRole", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(changeRoleRequest)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows a club to remove a member
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be logged in
        //- Club exists and is active
        //- Calling user cannot change their own role in a club
        //- Calling user must be an admin of a club
        //- Target user must exist &amp; be active
        //- Target user must be an existing member or admin of a club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="userId"></param>
        public async Task<APIResponse<object>> Club_PostRemoveUserFromClubAsync(string oauthToken, string id, string userId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/deleteUser/" + userId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to search for a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- Only active public clubs will be returned
        //Algorithm
        //- The algorithm assigns a score to each club and orders it by that score.
        //- If we have a search query (it is optional) the following happens
        //- It is normalised, so we do not check case.
        //- We split the query into a collection of PIECES, based on ' ', '.' &amp; '@'. For example: 'robert@sadev.co.za' will become 'robert' 'sadev' 'co' 'za'
        //- If the club name matches the query exactly, it gets +5 to the score
        //- If the name contains any piece, it gets +1
        //- If the suburb or province equals a piece, it gets +2 for each
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClubResponseItem>> Club_PostSearchAsync(string oauthToken, ClubSearchRequest request, int skip, int top)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/search", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows a club to be delete
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- Club must be active
        //- User must be a club admin &amp; last user
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Club_DeleteAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Club/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the details of a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- Club must be active
        //- For private clubs, user must be a follower, member, admin or have an active invite.
        //</remarks>
        //<returns>
        // {API.Models.ClubGetResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<ClubGetResponse>> Club_GetAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Club/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ClubGetResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ClubGetResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ClubGetResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ClubGetResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ClubGetResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ClubGetResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows a club to be updated
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- Club must be active
        //- User must be a club admin
        //- Location must be specified
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Club_PutAsync(string oauthToken, string id, ClubUpdateRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Club/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows a user to create a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- Club name needs to be provided and be unique in the system
        //- Location needs to be provided
        //- If club is public, then see followers and see members is enabled
        //- If club is hidden, then see followers and see members is disabled
        //- Calling user will be made an admin
        //- Club name can only be made up of A-Z, a-z, 0-9, and whitespace
        //- Club name will be split up into pieces (using space as the separator) and if any piece is in the reserved words list it will fail
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<string>> Club_PostAsync(string oauthToken, ClubCreateRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Club", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Deletes an invite to a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged
        //- User must be a club admin
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="inviteid"></param>
        public async Task<APIResponse<object>> ClubInvite_DeleteAsync(string oauthToken, string id, string inviteid)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/club/" + id + "/invite/" + inviteid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the invites that a club has active
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- User must be an admin of the club
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClubInviteItem>> ClubInvite_GetAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/invite", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubInviteItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfClubInviteItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubInviteItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubInviteItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubInviteItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubInviteItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to create an invite to a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must be active
        //- User must be a club admin
        //- Recipient must be active
        //- Recipient cannot have existing invites to club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> ClubInvite_PostAsync(string oauthToken, string id, AddClubInviteRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/invite", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used by a user to leave a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must be active
        //- User must a member of the club
        //- If the user is admin of the club, they can NOT be the last admin of the club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> ClubJoin_DeleteAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/ClubJoin/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used by a user to join a club or change their relationship
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must be active
        //- If user is already a club member, they can NOT be an admin
        //- If club does not allow followers, then the request must be to be a member
        //- If a club is hidden then the requesting user must have an invite
        //- user cannot be a member of more than x clubs where x is specified in the setting
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> ClubJoin_PostAsync(string oauthToken, ClubJoinRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/ClubJoin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the specified users books as they relate to the club
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Calling user must be a member of the club
        //- Target person must be a member of the club
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="clubId"></param>
        //<param name="memberId"></param>
        //<param name="filter"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfBookItem>> ClubMember_GetMembersBooksAsync(string oauthToken, string clubId, string memberId, string filter, int height, int width, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + clubId + "/member/" + memberId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfBookItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfBookItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfBookItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to delete an event
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must exist &amp; be active
        //- User must be a club admin
        //- Event must exist and be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="eventid"></param>
        public async Task<APIResponse<object>> Event_DeleteAsync(string oauthToken, string id, string eventid)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/club/" + id + "/event/" + eventid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get specified event details
        //</summary>
        //<remarks>
        // Rules
        //- User must authenticated
        //- Club must be active
        //- User must have a relationship to a club (member, follower, admin)
        //</remarks>
        //<returns>
        // {API.Models.EventItem}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="eventid"></param>
        public async Task<APIResponse<EventItem>> Event_GetSingleEventAsync(string oauthToken, string id, string eventid)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/event/" + eventid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<EventItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<EventItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<EventItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<EventItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<EventItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<EventItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update the details of an event
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must be active
        //- User must be a member, follower or admin of a club
        //- Location must be provided
        //- Event must exist and be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="eventid"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Event_PutAsync(string oauthToken, string id, string eventid, EventCreateRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/club/" + id + "/event/" + eventid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the events for the club
        //</summary>
        //<remarks>
        // #Rules
        //
        //- User must be authenticated
        //- Club must be active
        //- Events must be active
        //- User must be a member, admin or follower of a club
        //- If range parameters provided, start must be before end
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="eventStartRangeBegin"></param>
        //<param name="eventStartRangeEnd"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfEventItem>> Event_GetEventsAsync(string oauthToken, string id, DateTime eventStartRangeBegin, DateTime eventStartRangeEnd, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/event", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfEventItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfEventItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfEventItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfEventItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfEventItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfEventItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows the creation of an event
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Club must be active
        //- User must be the club admin
        //- Location must be provided
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Event_PostAsync(string oauthToken, string id, EventCreateRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/event", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to send an invite to an event to a single a target user
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Calling user must be a club admin
        //- Recipient of the invite must be a member or admin of the club
        //- Event must be active
        //- Event start cannot be today or in the past
        //- Recipient cannot have an existing invite for this event
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="eventid"></param>
        //<param name="userId"></param>
        public async Task<APIResponse<object>> Event_PostAddInviteAsync(string oauthToken, string id, string eventid, string userId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/event/" + eventid + "/invite/" + userId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to start the "forgot password process". This is a two-step process.
        //</summary>
        //<remarks>
        // Rules
        //- User can NOT be logged in
        //- Email must be provided
        //- Email must be in a valid email format
        //- User with the same email must exist in the system
        //- If the user has an existing password reset in progress, it will be removed
        //- Password reset is only valid for 1 day from time of request
        //</remarks>
        //<param name="request"></param>
        public async Task<APIResponse<object>> ForgotPassword_PostAsync(ForgotPasswordRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/ForgotPassword", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Delete alias in the system.
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Name must be provided
        //- Genre &amp; alias must exist
        //</remarks>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="aliasId"></param>
        public async Task<APIResponse<object>> Genres_DeleteAliasAsync(string oauthToken, int id, int aliasId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/genres/" + id + "/alias/" + aliasId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Remove a from genre a book. Used by admin.
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Book must exists
        //- Genre must exist
        //- Book must contain genre
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="bookId"></param>
        //<param name="id"></param>
        public async Task<APIResponse<int>> Genres_DeleteGenreToBookAsync(string oauthToken, string bookId, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/genres/" + id + "/book/" + bookId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<int>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<int>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<int>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add a genre to a book. Used by admin.
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Book must exists
        //- Genre must exist
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="bookId"></param>
        //<param name="id"></param>
        public async Task<APIResponse<int>> Genres_PostAddGenreToBookAsync(string oauthToken, string bookId, int id)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/genres/" + id + "/book/" + bookId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<int>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<int>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<int>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add an alias to the system.
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Name must be provided
        //- Genre must exist
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<int>> Genres_PostAliasAsync(string oauthToken, int id, CreateGenreAlias request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/genres/" + id + "/alias", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<int>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<int>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<int>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Delete a specified genre
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Genre ID must exist
        //- Genre must be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Genres_DeleteAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Genres/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Update an existing genre
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Genre ID must exist
        //- Genre must be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Genres_PutAsync(string oauthToken, int id, GenreCreateRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Genres/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get a list of all the genres in the system
        //</summary>
        //<remarks>
        // Rules
        //- User must be signed in.
        //- Only genres with at least one associated item are returned if the user is a standard user
        //</remarks>
        //<returns>
        // {GenreResponseItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<GenreResponseItem[]>> Genres_GetAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Genres", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<GenreResponseItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<GenreResponseItem[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<GenreResponseItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<GenreResponseItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<GenreResponseItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add a genre to the system.
        //</summary>
        //<remarks>
        // Rules
        //- Must be signed in.
        //- Must be a system user
        //- Name must be provided
        //- Genre with same name &amp; parent cannot already exist.
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<int>> Genres_PostAsync(string oauthToken, GenreCreateRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Genres", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<int>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<int>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<int>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<int>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to check the health of the service and get the version.
        //</summary>
        public async Task<APIResponse<SystemStatus>> Health_GetAsync()
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Health", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)));
                if (response == null)
                {
                    return new APIResponse<SystemStatus>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<SystemStatus>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<SystemStatus>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<SystemStatus>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to logout of the system
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //</remarks>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<object>> Logout_PostAsync(string oauthToken)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Logout", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to login with a 3rd party (OAuth provider). At this point it is only Facebook
        //</summary>
        //<remarks>
        // Rules
        //- User cannot be logged in
        //- 3rd party must provide a valid token
        //- If user does NOT exist in the system yet, based on the email address of the third party, they will be created and logged in
        //- If user does exist in the system yet, based on the email address of the third party, they must be active and then they will be logged in
        //</remarks>
        //<param name="request"></param>
        public async Task<APIResponse<object>> OAuth_PostAsync(OAuthRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/OAuth", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get a random welcome quote
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<returns>
        // {System.String}
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<string>> Quote_GetAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Quote", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to remove a rating
        //</summary>
        //<remarks>
        // Rules
        //- User must authenticated
        //- Only the user who created the rating can remove it
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Rating_DeleteAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Rating/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add a rating
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Rating cannot be less than 1 or greater than 5
        //- No existing rating for this user and item can exists
        //- Thing must exist and be active
        //- Only if the calling user has the book (assuming it is a book) listed as read
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Rating_PostAsync(string oauthToken, AddRatingRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Rating", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update a rating value and note
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Rating cannot be less than 1 or greater than 5
        //- Existing rating for this user and item must exists
        //- Book must exist and be active
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Rating_PutAsync(string oauthToken, UpdateRatingRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Rating", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to confirm that the users email address is valid as part of the signup process
        //</summary>
        //<remarks>
        // Rules
        //- User must NOT be authenticated
        //- Email and PIN must be provided
        //- Email must be in a valid email format
        //- User must be in the system with the same email and be in a pending confirm state
        //- PIN must match the one in the email
        //</remarks>
        //<param name="request"></param>
        public async Task<APIResponse<object>> RegistrationConfirm_PostAsync(RegistrationConfirmRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/RegistrationConfirm", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to remove a reservation on an item
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Reservation must exist
        //- User must be the the person who created the reservation
        //- or user must be owner of the item
        //- or the user must be an admin of a club which "owns" the resource
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Reserve_DeleteAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Reserve/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get the reservations on a resource
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Resource must exist and be active
        //- You get all the reservations for a resource, regardless of settings
        //- If you are an owner of a resource, you can see who the reservations for that resource are for
        //- If you are a club admin, you can see who the reservations for that resource are for
        //- If the person who reserved the resource, has share reservations turned on, you can see who the reservation is for
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfReservationResponseItem>> Reserve_GetAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Reserve/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfReservationResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfReservationResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to create a reservation for a resource
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Resource must exist and be active
        //- User cannot have an existing reservation for the resource
        //- User must be a member or admin of a club which "owns" a resource
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Reserve_PostAsync(string oauthToken, ReserveRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Reserve", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to remove a reserved club name
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticate
        //- User must be system admin
        //- title must be unique
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> ReservedName_DeleteAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/ReservedName/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get a reserved club name
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticate
        //- User must be system admin
        //</remarks>
        //<returns>
        // {System.String}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<string>> ReservedName_GetAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/ReservedName/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update a reserved club name
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticate
        //- User must be system admin
        //- title must be unique
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="title"></param>
        public async Task<APIResponse<object>> ReservedName_PutAsync(string oauthToken, int id, string title)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/ReservedName/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ReservedName_GetOut
        {
        }

        //<summary>
        // Used to get all reserved club names
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticate
        //- User must be system admin
        //</remarks>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<ReservedName_GetOut>> ReservedName_GetAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/ReservedName", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ReservedName_GetOut>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ReservedName_GetOut>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ReservedName_GetOut>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<ReservedName_GetOut>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ReservedName_GetOut>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to create a reserved club name
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticate
        //- User must be system admin
        //- title must be unique
        //</remarks>
        //<returns>
        // {System.Int32}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="title"></param>
        public async Task<APIResponse<object>> ReservedName_PostAsync(string oauthToken, string title)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/ReservedName", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used as the second step in resetting the password for a user
        //</summary>
        //<remarks>
        // Rules
        //- User can NOT be logged in
        //- Token, Password &amp; Password Confirm must be provided
        //- Password &amp; confirm must match
        //- Password must meet the strength requirements
        //- Token must be a valid token
        //- Token cannot have expired
        //- User must be active
        //</remarks>
        //<param name="request"></param>
        public async Task<APIResponse<object>> ResetPassword_PostAsync(PasswordResetRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/ResetPassword", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to check in a resource back into a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- User must be a member or admin of the club
        //- Resource must exist in club
        //- Resource must be checked out
        //- User checking in the resource must be the person who checked it out or a club admin
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceId"></param>
        public async Task<APIResponse<object>> Resource_PostCheckinResourceAsync(string oauthToken, string id, string resourceId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/resource/" + resourceId + "/checkin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Deletes a resource from a group
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- User must be a admin of the club or the owner (i.e. the person who captured it) of the resource
        //- Resource must exist in club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceId"></param>
        public async Task<APIResponse<object>> Resource_DeleteAsync(string oauthToken, string id, string resourceId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/club/" + id + "/resource/" + resourceId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a specific resource belonging to a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- User must be a member or admin of a club
        //</remarks>
        //<returns>
        // {API.Models.ResourceItem}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceId"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<ResourceItem>> Resource_GetResourceAsync(string oauthToken, string id, string resourceId, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/resource/" + resourceId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ResourceItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ResourceItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ResourceItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Adds a specific resource to a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- User must be a member or admin of a club, needs to work with club rules.
        //- User must be owner of resource
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceId"></param>
        public async Task<APIResponse<object>> Resource_PostAddResourceToClubAsync(string oauthToken, string id, string resourceId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/resource/" + resourceId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Deletes a resource from a user
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="resourceId"></param>
        public async Task<APIResponse<object>> Resource_DeleteFromUserAsync(string oauthToken, string resourceId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/user/resource/" + resourceId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets resources associated to the specific club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- User must be a member or admin of a club
        //</remarks>
        //<returns>
        // {API.Models.ResourceCollection}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceType"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<ResourceCollection>> Resource_GetAsync(string oauthToken, string id, string resourceType, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/resource", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ResourceCollection>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ResourceCollection>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ResourceCollection>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ResourceCollection>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ResourceCollection>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ResourceCollection>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a specific resource belonging to a user
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //</remarks>
        //<returns>
        // {API.Models.ResourceItem}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="resourceId"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<ResourceItem>> Resource_GetUserResourceAsync(string oauthToken, string resourceId, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/resource/" + resourceId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ResourceItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ResourceItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ResourceItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ResourceItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to checkout a resource from a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- User must be a member or admin of the club
        //- Resource must exist in club
        //- Resource must be checked in
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="resourceId"></param>
        public async Task<APIResponse<object>> Resource_PostCheckoutResourceAsync(string oauthToken, string id, string resourceId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/club/" + id + "/resource/" + resourceId + "/checkout", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used by a user to RSVP to an event or update an existing RSVP
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- ID is the event ID
        //- Event must exist &amp; be active
        //- User must be a admin of a club who owns the event or the event creator
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfRSVPItem>> RSVP_GetAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/RSVP/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfRSVPItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfRSVPItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfRSVPItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used by a user to RSVP to an event or update an existing RSVP
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Event must exist &amp; be active
        //- Event start must be in the future
        //- User must be a member or admin of a club
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> RSVP_PostAsync(string oauthToken, RSVPRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/RSVP", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> System_DeleteQuoteAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/system/quote", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class System_GetQuotesOut
        {
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<System_GetQuotesOut>> System_GetQuotesAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/system/quote", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<System_GetQuotesOut>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        return new APIResponse<System_GetQuotesOut>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<System_GetQuotesOut>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="content"></param>
        public async Task<APIResponse<object>> System_PostQuoteAsync(string oauthToken, string content)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/system/quote", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<SystemSettingItem>> System_GetAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/system", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<SystemSettingItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<SystemSettingItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<SystemSettingItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<SystemSettingItem>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // No Content
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> System_PostAsync(string oauthToken, SystemSettingItem request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/system", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="type"></param>
        public async Task<APIResponse<object>> System_GetSystemEmailAsync(string oauthToken, string type)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/system/email/" + type + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<object>> System_GetSystemEmailsAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/system/email", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> System_PutSystemEmailAsync(string oauthToken, EmailItem request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/system/email", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get trending books for a single club
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //Algorithm
        //- Each book in the system is assigned a score. The higher the score, the more "popular" it is.
        //- The score is made up of
        //- Number of new resources for that book in the last month. This is weighted at 20% of the score
        //- Number of new/updated ratings for that book in the last month. This is weighted at 10% of the score
        //- Number of resources checked out currently for the book. This is weighted at 40% of the score
        //- Number of reservations for the resources. This is weighted at 30% of the score.
        //</remarks>
        //<returns>
        // {BookItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="ageFilter"></param>
        //<param name="dateFilter"></param>
        //<param name="endAgeRange"></param>
        //<param name="endDateRange"></param>
        //<param name="limit"></param>
        //<param name="startAgeRange"></param>
        //<param name="startDateRange"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<BookItem[]>> Trending_GetClubTrendingAsync(string oauthToken, string id, bool ageFilter, bool dateFilter, int endAgeRange, DateTime endDateRange, int limit, int startAgeRange, DateTime startDateRange, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/club/" + id + "/trending", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<BookItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<BookItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<BookItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get trending books over the entire system
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //Algorithm
        //- Each book in the system is assigned a score. The higher the score, the more "popular" it is.
        //- The score is made up of
        //- Number of new resources for that book in the date range. This is weighted at 20% of the score
        //- Number of new/updated ratings for that book in the date range, if provided the age filter. This is weighted at 10% of the score
        //- Number of resources checked out currently for the book, if provided the age filter. This is weighted at 40% of the score
        //- Number of reservations for the resources, if provided the age filter and if provided by the location filter provider. This is weighted at 30% of the score.
        //- Date range is the last month, unless otherwise specified
        //</remarks>
        //<returns>
        // {BookItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="ageFilter"></param>
        //<param name="dateFilter"></param>
        //<param name="endAgeRange"></param>
        //<param name="endDateRange"></param>
        //<param name="limit"></param>
        //<param name="startAgeRange"></param>
        //<param name="startDateRange"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<BookItem[]>> Trending_GetTrendingAsync(string oauthToken, bool ageFilter, bool dateFilter, int endAgeRange, DateTime endDateRange, int limit, int startAgeRange, DateTime startDateRange, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/book/trending", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<BookItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<BookItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<BookItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<BookItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Deletes an invite to a club
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //- User must be the recipient of the invite
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="inviteid"></param>
        public async Task<APIResponse<object>> User_DeleteClubInviteAsync(string oauthToken, string inviteid)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/user/invite/" + inviteid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to flag an invite as seen
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- The invite must be for the calling user
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="inviteid"></param>
        public async Task<APIResponse<object>> User_PutEventInviteAsync(string oauthToken, string inviteid)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/user/invite/" + inviteid + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to delete an invite to an event
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="eventId"></param>
        public async Task<APIResponse<object>> User_DeleteEventInviteAsync(string oauthToken, string eventId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/user/eventInvite/" + eventId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current users books
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfBookItem>> User_GetBooksAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/books", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfBookItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfBookItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfBookItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current users clubs
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClubGetUserResponse>> User_GetClubsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/club", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubGetUserResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubGetUserResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the specified users clubs
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Target user must exist &amp; be active
        //- Target user must be the same as the calling user OR the target user must have share clubs enabled
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClubGetUserResponse>> User_GetClubsForSpecifiedUserAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/club", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubGetUserResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubGetUserResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubGetUserResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current users events which they have RSVP'd to
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- RSVP must be maybe or going
        //- If range parameter provided, start must be before end date
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="eventStartRangeBegin"></param>
        //<param name="eventStartRangeEnd"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfRSVPItem>> User_GetEventsAsync(string oauthToken, DateTime eventStartRangeBegin, DateTime eventStartRangeEnd, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/event", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfRSVPItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfRSVPItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfRSVPItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfRSVPItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current users invites
        //</summary>
        //<remarks>
        // Rules
        //- The user must be logged in
        //- Any active invites will be returned
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClubInviteItem>> User_GetInvitesAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/invite", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClubInviteItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClubInviteItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClubInviteItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClubInviteItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClubInviteItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current users invites for events, regardless if they have been RSVP to
        //</summary>
        //<remarks>
        // Rules
        //- The user must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfEventItem>> User_GetMyEventInviteAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/eventInvite", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfEventItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfEventItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfEventItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfEventItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfEventItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get all the resources the current user has reserved
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //</remarks>
        //<returns>
        // {ReservationResponseItem[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<ReservationResponseItem[]>> User_GetMyReservationsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/reserve", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ReservationResponseItem[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ReservationResponseItem[]>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ReservationResponseItem[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ReservationResponseItem[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ReservationResponseItem[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ReservationResponseItem[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the specific users ratings
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Target user must be active
        //- Target user must have share ratings enable
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfRatingResponse>> User_GetRatingsAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/ratings", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfRatingResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfRatingResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfRatingResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfRatingResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfRatingResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfRatingResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the current users ratings
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfRatingResponse>> User_GetRatingsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/ratings", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfRatingResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfRatingResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfRatingResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfRatingResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfRatingResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to the specified users reads
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //-
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CollectionResponseOfReadResponseItem>> User_GetReadBooksAsync(string oauthToken, string id, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/read", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfReadResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfReadResponseItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfReadResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfReadResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfReadResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfReadResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the specified users books
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Target user must exist &amp; be active
        //- Target user must be the same as the calling user OR the target user must have share my books enabled
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CollectionResponseOfBookItem>> User_GetSpecificUsersBooksAsync(string oauthToken, string id, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/books", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfBookItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfBookItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfBookItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfBookItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the specified users reservations
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Target user must be active
        //- Target user must be same as auth user OR target user must be the same as the calling user
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfReservationResponseItem>> User_GetSpecificUsersReservationsAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/reserve", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfReservationResponseItem>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfReservationResponseItem>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfReservationResponseItem>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the specified users details
        //</summary>
        //<remarks>
        // Rules
        //- The calling user must be logged in
        //- The target user must be active
        //</remarks>
        //<returns>
        // {API.Models.UserResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="userId"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<UserResponse>> User_GetSpecifiedUserAsync(string oauthToken, string userId, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + userId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<UserResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<UserResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<UserResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<UserResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<UserResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<UserResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a specified users wish list
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- Target user must be active
        //- Target user must have share wish list enabled
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfWishlistResponse>> User_GetSpecifiedWishlistAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/" + id + "/wishlist", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfWishlistResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfWishlistResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfWishlistResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfWishlistResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfWishlistResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfWishlistResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a current users wish list
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfWishlistResponse>> User_GetWishlistAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/user/wishlist", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfWishlistResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfWishlistResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfWishlistResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfWishlistResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfWishlistResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to search for a specified user
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- The query must be provided
        //
        //Algorithm
        //- The algorithm assigns a score to each user and orders it by that score. The top 10 users will be returned
        //- It is normalised, so we do not check case.
        //- We split the query into a collection of PIECES, based on ' ', '.' &amp; '@'. For example: 'robert@sadev.co.za' will become 'robert' 'sadev' 'co' 'za'
        //- If the first name or last name of a user matches the query exactly, it gets +2 for each piece that exactly matches
        //- If the email of a user matches the query exactly, it gets +5 for each piece that exactly matches
        //- If the email, first name or last name contains any piece, it gets +1
        //</remarks>
        //<returns>
        // {API.Models.CollectionResponse`1}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<CollectionResponseOfUserSearchResponse>> User_PostFindUserAsync(string oauthToken, UserFindRequest request, int skip, int top, int height, int width)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/user/search", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfUserSearchResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfUserSearchResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfUserSearchResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfUserSearchResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfUserSearchResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfUserSearchResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to upload a profile picture
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="photo"></param>
        public async Task<APIResponse<object>> User_PostPhotoAsync(string oauthToken, PhotoUpload photo)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/user/photo", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(photo)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get the currents users' details
        //</summary>
        //<remarks>
        // Rules
        //- The user must be logged in
        //</remarks>
        //<returns>
        // {API.Models.UserResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="height"></param>
        //<param name="width"></param>
        public async Task<APIResponse<UserResponse>> User_GetAsync(string oauthToken, int height, int width)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/User", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<UserResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<UserResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<UserResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<UserResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<UserResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to signup a new user with email &amp; password into the system
        //</summary>
        //<remarks>
        // Rules
        //- User cannot be authenticated
        //- Email, first name, last name, password &amp; confirm needs to be provided
        //- Password &amp; confirm must match
        //- Email must be in valid email format
        //- Password must be of valid strength
        //- email cannot be in the system
        //</remarks>
        //<param name="request"></param>
        public async Task<APIResponse<object>> User_PostAsync(RegistrationRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/User", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 202:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update the current users details
        //</summary>
        //<remarks>
        // Rules
        //- Calling user must be authenticated
        //- If password is provided, the confirm is needed too.
        //- If password is provided, the password must match the confirm.
        //- If password is provided, the password must meet the password strength rules.
        //- First name and last name must be provided
        //- Location is optional &amp; will only update if provided
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> User_PutAsync(string oauthToken, UserUpdateRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/User", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Removes an item from the wish list
        //</summary>
        //<remarks>
        // Rules
        //- User must be logged in
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Wishlist_DeleteAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Wishlist/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add items to the wish list
        //</summary>
        //<remarks>
        // Rules
        //- User must be authenticated
        //- Book must exist and be active
        //- Book cannot be in the wish list already
        //</remarks>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<string>> Wishlist_PostAsync(string oauthToken, WishlistAdd request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Wishlist", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<string>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<string>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<string>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<string>(response.StatusCode);
                    }
                }
            }
        }
    }     public class SwaggerHTTPClientOptions
    {
        public TimeSpan Timeout { get; }
    
        public SwaggerHTTPClientOptions(TimeSpan timeout)
        {
            Timeout = timeout;
        }
    }
    
    public interface ISwaggerHTTPClient
    {
        Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null);
        Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
    }
    
    class SwaggerHTTPClient : ISwaggerHTTPClient
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "This is done interntionally as each place that calls this will dispose it")]
        private static HttpClient CreateClient()
        {
            var cookieJar = new CookieContainer();
            var httpHandler = new HttpClientHandler
            {
                CookieContainer = cookieJar,
                AllowAutoRedirect = true,
                UseCookies = true
            };
    
            var client = new HttpClient(httpHandler, true);
            client.DefaultRequestHeaders.CacheControl = new CacheControlHeaderValue
            {
                NoCache = true,
                NoStore = true,
                Private = true,
                ProxyRevalidate = true,
                MustRevalidate = true
            };
    
            return client;
        }
    
        public async Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("put", uri, httpOptions, content, token);
    
        public async Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("post", uri, httpOptions, content, token);
    
        private static async Task<HttpResponseMessage> HTTPCallAsync(string method, Uri uri, SwaggerHTTPClientOptions options, HttpContent content = null, string token = null)
        {
            using (var client = CreateClient())
            {
                using (var cancellationTokenSource = new CancellationTokenSource(options.Timeout))
                {
                    var errorMessage = string.Empty;
                    try
                    {
                        if (content != null)
                        {
                            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                        }
    
                        if (!string.IsNullOrWhiteSpace(token))
                        {
                            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
                        }
    
                        var response = default(HttpResponseMessage);
                        switch (method.ToUpperInvariant())
                        {
                            case "DELETE":
                                {
                                    response = await client.DeleteAsync(uri, cancellationTokenSource.Token);
                                    break;
                                }
                            case "POST":
                                {
                                    response = await client.PostAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "PUT":
                                {
                                    response = await client.PutAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "GET":
                                {
                                    response = await client.GetAsync(uri, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
                                    break;
                                }
                            case "HEAD":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseHeadersRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "OPTIONS":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "PATCH":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri,
                                        Content = content
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                        }
    
    #if DEBUG
                                    Debug.WriteLine($"HTTP {method} to {uri} returned {response.StatusCode} with content {await response.Content?.ReadAsStringAsync()}");
    #endif
                        return response;
                    }
                    catch (FileNotFoundException) { errorMessage = $"HTTP {method} exception - file not found exception"; /* this can happen if WP cannot resolve the server */ }
                    catch (WebException) { errorMessage = $"HTTP {method} exception - web exception"; }
                    catch (HttpRequestException) { errorMessage = $"HTTP {method} exception - http exception"; }
                    catch (TaskCanceledException) { errorMessage = $"HTTP {method} exception - task cancelled exception"; }
                    catch (UnauthorizedAccessException) { errorMessage = $"HTTP {method} exception - unauth exception"; }
    
    #if DEBUG
                                Debug.WriteLine(errorMessage);
    #endif
                }
            } 
    
            return null;
        }
    
        public async Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("head", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("options", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null) => await HTTPCallAsync("patch", uri, httpOptions, content, token: token);
    
        public async Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("delete", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("get", uri, httpOptions, token: token);
    }
    
    public class APIResponse<T>
    {
        public APIResponse(dynamic data, HttpStatusCode statusCode) : this(statusCode)
        {
            Data = data;
        }
    
        public APIResponse(T successData, HttpStatusCode statusCode) : this(statusCode)
        {
            SuccessData = successData;
            SuccessDataAvailable = true;
        }
    
        public bool Success { get; }
    
        public APIResponse(bool success)
        {
            Success = success;
        }
    
        public APIResponse(HttpStatusCode statusCode) : this((int)statusCode >= 200 && (int)statusCode <= 299)
        {
            HTTPStatusCode = statusCode;
        }
    
        public dynamic Data { get; }
    
        public T SuccessData { get; }
    
        public HttpStatusCode? HTTPStatusCode { get; }
    
        public bool SuccessDataAvailable { get; }
    }

}