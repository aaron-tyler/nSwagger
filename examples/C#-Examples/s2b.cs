//This file was autogenerated by nSwagger 0.0.2 - changes made to it maybe lost if nSwagger is run again.
namespace nSwagger
{
    using Newtonsoft.Json;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading;
    using System.Threading.Tasks;

    public class Portal
    {
        private readonly string url;
        private readonly ISwaggerHTTPClient httpClient;
        public Portal(string url = null, ISwaggerHTTPClient httpClient = null)
        {
            if (!string.IsNullOrWhiteSpace(url))
            {
                this.url = url;
            }
            else
            {
                this.url = "http://localhost:10474";
            } if  ( httpClient == null ) { this . httpClient  =  new  SwaggerHTTPClient ( ) ;  } else  { this . httpClient  =  httpClient ;  }

        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AdminResponse
        {
            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public bool Self
            {
                get;
                set;
            }

            public enum AdminResponseState
            {
                WaitingForPinConfirm,
                Active,
                Disabled
            }

            public AdminResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UpdateAdminRequest
        {
            public string FirstName
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FilterParameters
        {
            public int Skip
            {
                get;
                set;
            }

            public int Top
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfAdminResponse
        {
            public AdminResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class NewAdminRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CalendarShareRequest
        {
            public string Email
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfCalendarResponse
        {
            public CalendarResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CalendarResponse
        {
            public DateTime EndDate
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public enum CalendarResponseState
            {
                Active
            }

            public CalendarResponseState State
            {
                get;
                set;
            }

            public enum CalendarResponseType
            {
                Course,
                Exam
            }

            public CalendarResponseType Type
            {
                get;
                set;
            }

            public User User
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class User
        {
            public double AmountLastStipendReceived
            {
                get;
                set;
            }

            public string City
            {
                get;
                set;
            }

            public DateTime DateLastStipendReceived
            {
                get;
                set;
            }

            public DateTime DropOutDate
            {
                get;
                set;
            }

            public string DropOutReason
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string FurtherEmploymentCompanyName
            {
                get;
                set;
            }

            public string FurtherEmploymentEmail
            {
                get;
                set;
            }

            public string FurtherEmploymentManagerName
            {
                get;
                set;
            }

            public string FurtherEmploymentPhoneNumber
            {
                get;
                set;
            }

            public string FurtherEmploymentPosition
            {
                get;
                set;
            }

            public DateTime FurtherEmploymentStartDate
            {
                get;
                set;
            }

            public string HomeAddressLine1
            {
                get;
                set;
            }

            public string HomeAddressLine2
            {
                get;
                set;
            }

            public string HomeAddressLine3
            {
                get;
                set;
            }

            public HostEmployer HostEmployer
            {
                get;
                set;
            }

            public string HostEmployerManagerEmail
            {
                get;
                set;
            }

            public string HostEmployerManagerName
            {
                get;
                set;
            }

            public string HostEmployerManagerPhone
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public string NextOfKinEmail
            {
                get;
                set;
            }

            public string NextOfKinFirstName
            {
                get;
                set;
            }

            public string NextOfKinLastName
            {
                get;
                set;
            }

            public string NextOfKinPhoneNumber
            {
                get;
                set;
            }

            public string NextOfKinRelationship
            {
                get;
                set;
            }

            public string PasswordHash
            {
                get;
                set;
            }

            public string PasswordResetToken
            {
                get;
                set;
            }

            public string PasswordSalt
            {
                get;
                set;
            }

            public enum UserPasswordVersion
            {
                Version1
            }

            public UserPasswordVersion PasswordVersion
            {
                get;
                set;
            }

            public string PhoneNumber
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public enum UserRole
            {
                Student,
                Admin
            }

            public UserRole Role
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public enum UserState
            {
                WaitingForPinConfirm,
                Active,
                Disabled
            }

            public UserState State
            {
                get;
                set;
            }

            public enum UserStudentState
            {
                NotAStudent,
                Active,
                DroppedOut,
                Employeed
            }

            public UserStudentState StudentState
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class HostEmployer
        {
            public int Id
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum HostEmployerState
            {
                Active,
                Disabled
            }

            public HostEmployerState State
            {
                get;
                set;
            }

            public User[] Students
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CalendarRequest
        {
            public DateTime EndDate
            {
                get;
                set;
            }

            public int EventId
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }

            public enum CalendarRequestType
            {
                Course,
                Exam
            }

            public CalendarRequestType Type
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfCourseResponse
        {
            public CourseResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CourseResponse
        {
            public string Code
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum CourseResponseState
            {
                Active,
                Disabled
            }

            public CourseResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CourseRequest
        {
            public string Code
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfDroppedOutResponse
        {
            public DroppedOutResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class DroppedOutResponse
        {
            public double AmountLastStipendRecieved
            {
                get;
                set;
            }

            public DateTime DateLastStipendRecieved
            {
                get;
                set;
            }

            public string DropOutReason
            {
                get;
                set;
            }

            public DateTime DroppedOutDate
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class DroppedOutRequest
        {
            public double AmountLastStipendRecieved
            {
                get;
                set;
            }

            public DateTime DateLastStipendRecieved
            {
                get;
                set;
            }

            public string DropOutReason
            {
                get;
                set;
            }

            public DateTime DroppedOutDate
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfExamResponse
        {
            public ExamResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ExamResponse
        {
            public string Code
            {
                get;
                set;
            }

            public string ExamName
            {
                get;
                set;
            }

            public enum ExamResponsePassed
            {
                Passed,
                Failed
            }

            public ExamResponsePassed Passed
            {
                get;
                set;
            }

            public string Result
            {
                get;
                set;
            }

            public enum ExamResponseState
            {
                Active,
                Disabled
            }

            public ExamResponseState State
            {
                get;
                set;
            }

            public User Student
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ExamRequest
        {
            public string Code
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfFeedbackResponse
        {
            public FeedbackResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FeedbackResponse
        {
            public string Comment
            {
                get;
                set;
            }

            public DateTime RepliedAt
            {
                get;
                set;
            }

            public User RepliedBy
            {
                get;
                set;
            }

            public enum FeedbackResponseState
            {
                Replied,
                Pending
            }

            public FeedbackResponseState State
            {
                get;
                set;
            }

            public StudentResponse User
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class StudentResponse
        {
            public string City
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string HomeAddressLine1
            {
                get;
                set;
            }

            public string HomeAddressLine2
            {
                get;
                set;
            }

            public string HomeAddressLine3
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public string Image
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public string NextOfKinEmail
            {
                get;
                set;
            }

            public string NextOfKinFirstName
            {
                get;
                set;
            }

            public string NextOfKinLastName
            {
                get;
                set;
            }

            public string NextOfKinPhoneNumber
            {
                get;
                set;
            }

            public string NextOfKinRelationship
            {
                get;
                set;
            }

            public string PhoneNumber
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }

            public enum StudentResponseState
            {
                WaitingForPinConfirm,
                Active,
                Disabled
            }

            public StudentResponseState State
            {
                get;
                set;
            }

            public enum StudentResponseStudentState
            {
                NotAStudent,
                Active,
                DroppedOut,
                Employeed
            }

            public StudentResponseStudentState StudentState
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FeedbackRequest
        {
            public string Comment
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfFurtherEmploymentResponse
        {
            public FurtherEmploymentResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FurtherEmploymentResponse
        {
            public string FurtherEmploymentCompanyName
            {
                get;
                set;
            }

            public string FurtherEmploymentEmail
            {
                get;
                set;
            }

            public string FurtherEmploymentManagerName
            {
                get;
                set;
            }

            public string FurtherEmploymentManagerPhoneNumber
            {
                get;
                set;
            }

            public string FurtherEmploymentPosition
            {
                get;
                set;
            }

            public DateTime FurtherEmploymentStartDate
            {
                get;
                set;
            }

            public StudentResponse Student
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class FurtherEmploymentRequest
        {
            public string CompanyName
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string ManagerName
            {
                get;
                set;
            }

            public string PhoneNumber
            {
                get;
                set;
            }

            public string Position
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class HostEmployerResponse
        {
            public string Name
            {
                get;
                set;
            }

            public enum HostEmployerResponseState
            {
                Active,
                Disabled
            }

            public HostEmployerResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class HostEmployerRequest
        {
            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class TrainingProviderResponse
        {
            public CourseResponse[] Courses
            {
                get;
                set;
            }

            public ExamResponse[] Exams
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum TrainingProviderResponseState
            {
                Active,
                Disabled
            }

            public TrainingProviderResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfHostEmployerResponse
        {
            public HostEmployerResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ConfirmPasswordResetRequest
        {
            public string Password
            {
                get;
                set;
            }

            public string Token
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class BeginPasswordResetRequest
        {
            public string Email
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class LoginRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class LoginResponse
        {
            public enum LoginResponseRole
            {
                Student,
                Admin
            }

            public LoginResponseRole Role
            {
                get;
                set;
            }

            public string Token
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RewardResponse
        {
            public string Description
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum RewardResponseRewardedWhen
            {
                SignedUp
            }

            public RewardResponseRewardedWhen RewardedWhen
            {
                get;
                set;
            }

            public enum RewardResponseState
            {
                Active,
                Disable
            }

            public RewardResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class RewardRequest
        {
            public string Description
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public string Name
            {
                get;
                set;
            }

            public enum RewardRequestRewardedWhen
            {
                SignedUp
            }

            public RewardRequestRewardedWhen RewardedWhen
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfRewardResponse
        {
            public RewardResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfClaimedRewardsResponse
        {
            public ClaimedRewardsResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ClaimedRewardsResponse
        {
            public DateTime Claimed
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public RewardResponse Reward
            {
                get;
                set;
            }

            public StudentResponse Student
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfTrainingProviderResponse
        {
            public TrainingProviderResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddStudentsToExamsRequest
        {
            public int ExamId
            {
                get;
                set;
            }

            public int TrainingProviderId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class StudentsRequest
        {
            public string City
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public string FirstName
            {
                get;
                set;
            }

            public string HomeAddressLine2
            {
                get;
                set;
            }

            public string HomeAddressLine3
            {
                get;
                set;
            }

            public string LastName
            {
                get;
                set;
            }

            public string NextOfKinEmail
            {
                get;
                set;
            }

            public string NextOfKinFirstName
            {
                get;
                set;
            }

            public string NextOfKinLastName
            {
                get;
                set;
            }

            public string NextOfKinPhoneNumber
            {
                get;
                set;
            }

            public string NextOfKinRelationship
            {
                get;
                set;
            }

            public string PhoneNumber
            {
                get;
                set;
            }

            public string Province
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CollectionResponseOfStudentResponse
        {
            public StudentResponse[] Items
            {
                get;
                set;
            }

            public string Next
            {
                get;
                set;
            }

            public string Previous
            {
                get;
                set;
            }

            public int TotalCount
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CreateStudentRequest
        {
            public string Email
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddCourseToTrainingProviderRequest
        {
            public int CourseId
            {
                get;
                set;
            }

            public int TrainingProviderId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class TrainingProviderRequest
        {
            public string Name
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class EditCourseToTrainingProvidersRequest
        {
            public int CourseId
            {
                get;
                set;
            }

            public int TrainingProvidersId
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ResetPasswordRequest
        {
            public string Password
            {
                get;
                set;
            }
        }

        //<summary>
        // Gets a single admin from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<AdminResponse>> Admins_GetAdminAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Admins/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<AdminResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<AdminResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // edits admin information from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<AdminResponse[]>> Admins_PutUpdateAdminAsync(string oauthToken, string id, UpdateAdminRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Admins/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all admins from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfAdminResponse>> Admins_GetAdminsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Admins", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfAdminResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfAdminResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfAdminResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfAdminResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfAdminResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Adds an administrator to the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<AdminResponse[]>> Admins_PostAdminsAsync(string oauthToken, NewAdminRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Admins", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Delete a calendar entry from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="calendarId"></param>
        public async Task<APIResponse<object>> Calendar_DeleteCalendarEntryAsync(string oauthToken, int id, string calendarId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/calendar/" + id + "/" + calendarId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request">The email of the person to share with</param>
        public async Task<APIResponse<object>> Calendar_PostShareCalendarAsync(string oauthToken, CalendarShareRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/calendar/share", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all the calendars from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfCalendarResponse>> Calendar_GetCalendarAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Calendar", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfCalendarResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfCalendarResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfCalendarResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfCalendarResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfCalendarResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfCalendarResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add a calendar to the database as well as courses and exams to the calendar.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="calendar"></param>
        public async Task<APIResponse<CalendarResponse>> Calendar_PostUserCalendarAsync(string oauthToken, CalendarRequest calendar)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Calendar", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(calendar)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CalendarResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CalendarResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CalendarResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a calendar. Gets students exams and student courses from the students calendar.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CalendarResponse>> Calendar_GetStudentCalendarInformationAsync(string oauthToken, int id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Calendar/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CalendarResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CalendarResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CalendarResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CalendarResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to disable courses from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Courses_PutDisableCourseAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/courses/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to enable courses from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Courses_PutEnableCourseAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/courses/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get a all the courses
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfCourseResponse>> Courses_GetCoursesAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Courses", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfCourseResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CollectionResponseOfCourseResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfCourseResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfCourseResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfCourseResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfCourseResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // used to add courses
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="course">Courses and course codes</param>
        public async Task<APIResponse<CourseResponse>> Courses_PostAddCourseAsync(string oauthToken, CourseRequest course)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Courses", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(course)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CourseResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CourseResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CourseResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get a single course
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<CourseResponse>> Courses_GetSingleCourseAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Courses/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CourseResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 404:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CourseResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CourseResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CourseResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // edits course information on the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Courses_PutCourseAsync(string oauthToken, int id, CourseRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Courses/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all drop out students
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfDroppedOutResponse>> DroppedOut_GetDroppedOutAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/DroppedOut", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfDroppedOutResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfDroppedOutResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfDroppedOutResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfDroppedOutResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfDroppedOutResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Individual students that have dropped out of the program.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<DroppedOutResponse>> DroppedOut_GetDroppedOutStudentAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/DroppedOut/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<DroppedOutResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<DroppedOutResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<DroppedOutResponse>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<DroppedOutResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<DroppedOutResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<DroppedOutResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Sets a user as dropped out
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request">Reason for dropping out, date of drop out, date when last recieved stipend &amp; amount recieved</param>
        public async Task<APIResponse<object>> DroppedOut_PostDroppedOutAsync(string oauthToken, string id, DroppedOutRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/DroppedOut/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to disable an Exam from the system.
        //</summary>
        //<returns>
        // Return no content
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Exam_PutDisableExamAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/exam/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to Enable Exams from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Exam_PutEnableExamAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/exam/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a list of all the exmas.
        //</summary>
        //<returns>
        // Succcess
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfExamResponse>> Exam_GetExamsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Exam", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfExamResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfExamResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfExamResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfExamResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfExamResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add exams to the program.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="exam">Exams and Exam codes</param>
        public async Task<APIResponse<ExamResponse>> Exam_PostExamsAsync(string oauthToken, ExamRequest exam)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Exam", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(exam)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ExamResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<ExamResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ExamResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a single exams from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<ExamResponse>> Exam_GetSingleExamAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Exam/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ExamResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ExamResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ExamResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ExamResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Edits Exams  information on the system.
        //</summary>
        //<returns>
        // Return Accepted
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Exam_PutExamAsync(string oauthToken, int id, ExamRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Exam/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all students feedback that has been answered.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfFeedbackResponse>> Feedback_GetAllFeedbackAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Feedback", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfFeedbackResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfFeedbackResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfFeedbackResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfFeedbackResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfFeedbackResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // used to login to the service
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="feedback">Comment message</param>
        public async Task<APIResponse<FeedbackResponse>> Feedback_PostFeedbackAsync(string oauthToken, FeedbackRequest feedback)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Feedback", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(feedback)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<FeedbackResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<FeedbackResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<FeedbackResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets single feedback from a student that has been answered already.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<FeedbackResponse>> Feedback_GetSingleFeedbackAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Feedback/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<FeedbackResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<FeedbackResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<FeedbackResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<FeedbackResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all students who got employment
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="since"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfFurtherEmploymentResponse>> FurtherEmployment_GetAllStudentsWithFurtherEmploymentAsync(string oauthToken, DateTime since, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/students/furtherEmployment", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfFurtherEmploymentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfFurtherEmploymentResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfFurtherEmploymentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfFurtherEmploymentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfFurtherEmploymentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a specific students who got employment
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<FurtherEmploymentResponse>> FurtherEmployment_GetStudentWithFurtherEmploymentAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/students/" + id + "/furtherEmployment", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<FurtherEmploymentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<FurtherEmploymentResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<FurtherEmploymentResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<FurtherEmploymentResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<FurtherEmploymentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<FurtherEmploymentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<FurtherEmploymentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to set further employment info for a student
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request">Details of users further employment</param>
        public async Task<APIResponse<object>> FurtherEmployment_PostFurtherEmploymentAsync(string oauthToken, string id, FurtherEmploymentRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/students/" + id + "/furtherEmployment", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        public async Task<APIResponse<object>> Health_GetAsync()
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Health", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Associates a student with a host employeer
        //</summary>
        //<returns>
        // success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="hostId"></param>
        public async Task<APIResponse<object>> HostEmployer_PostAssociateStudentToHostEmployeerAsync(string oauthToken, string id, int hostId)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/students/" + id + "/host/" + hostId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Disables a Host Employer from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> HostEmployer_PutDisableHostEmployerAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/hostEmployers/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Enables a Host Employer from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> HostEmployer_PutEnableHostEmployerAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/hostEmployers/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a Host Employer and the Students
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<HostEmployerResponse>> HostEmployer_GetHostEmployerAsync(string oauthToken, int id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/HostEmployer/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<HostEmployerResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<HostEmployerResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<HostEmployerResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<HostEmployerResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<HostEmployerResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<HostEmployerResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update an existing host Employer.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<TrainingProviderResponse[]>> HostEmployer_PutHostEmployerAsync(string oauthToken, int id, HostEmployerRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/HostEmployer/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TrainingProviderResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<TrainingProviderResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TrainingProviderResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all Host Employers from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfHostEmployerResponse>> HostEmployer_GetHostEmployersAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/HostEmployer", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfHostEmployerResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfHostEmployerResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfHostEmployerResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfHostEmployerResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfHostEmployerResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Adds a Host Employer to the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="hostEmployer"></param>
        public async Task<APIResponse<StudentResponse>> HostEmployer_PostAddHostEmployerAsync(string oauthToken, HostEmployerRequest hostEmployer)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/HostEmployer", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(hostEmployer)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<StudentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<StudentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<StudentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Finishes the password reset process
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="request">Email for user</param>
        public async Task<APIResponse<object>> Login_PostConfirmPasswordResetAsync(ConfirmPasswordResetRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/login/confirmPasswordReset", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Starts the password reset process
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="request">Email for user</param>
        public async Task<APIResponse<object>> Login_PostStartPasswordResetAsync(BeginPasswordResetRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/login/beginPasswordReset", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // used to login to the service
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="request">Username &amp; password</param>
        public async Task<APIResponse<LoginResponse>> Login_PostLoginAsync(LoginRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Login", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<LoginResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<LoginResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<LoginResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<LoginResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<LoginResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Disables a rewards from the system.
        //</summary>
        //<returns>
        // Sucess
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Reward_PutDisableRewardsAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/rewards/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Enables Rewards to the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Reward_PutEnableRewardsAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/rewards/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Allows the student to view a single icon reward.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<RewardResponse>> Reward_GetRewardAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Reward/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<RewardResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<RewardResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<RewardResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="requiredState"></param>
        //<param name="requestedState"></param>
        public async Task<APIResponse<object>> Reward_SetRewardStateAsync(string oauthToken, int id, string requiredState, string requestedState)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Reward/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to edit rewards in the system.
        //</summary>
        //<returns>
        // success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Reward_PutStudentRewardAsync(string oauthToken, int id, RewardRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Reward/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all the rewards from the system.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfRewardResponse>> Reward_GetStudentRewardAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Reward", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfRewardResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfRewardResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfRewardResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfRewardResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfRewardResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to Add students rewards to the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="reward">Name, Decription, ImageId &amp; Reward State;</param>
        public async Task<APIResponse<RewardResponse>> Reward_PostAddStudentRewardAsync(string oauthToken, RewardRequest reward)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Reward", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(reward)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<RewardResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<RewardResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<RewardResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<RewardResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all Claimed Rewards of a student
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfClaimedRewardsResponse>> Students_GetStudentRewardsAsync(string oauthToken, string id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/students/" + id + "/rewards", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfClaimedRewardsResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfClaimedRewardsResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<CollectionResponseOfClaimedRewardsResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfClaimedRewardsResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfClaimedRewardsResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfClaimedRewardsResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the training provider a student belongs too.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="param">Filter Paramenters</param>
        public async Task<APIResponse<CollectionResponseOfTrainingProviderResponse>> Students_GetTrainingProvidersAsync(string oauthToken, string id, FilterParameters param)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/students/" + id + "/trainingproviders", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(param)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfTrainingProviderResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfTrainingProviderResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add students to exams.
        //</summary>
        //<returns>
        // Sucess
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Students_PostAddExamsToStudentsAsync(string oauthToken, AddStudentsToExamsRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/students/addExams", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets one student from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<StudentResponse>> Students_GetStudentAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Students/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<StudentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<StudentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<StudentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to edit students on the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request">Users details</param>
        public async Task<APIResponse<object>> Students_PutStudentAsync(string oauthToken, string id, StudentsRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Students/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets students from the system for admins
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfStudentResponse>> Students_GetStudentsAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Students", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfStudentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfStudentResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfStudentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfStudentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfStudentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to Add students to the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request">Username &amp; password</param>
        public async Task<APIResponse<StudentResponse>> Students_PostStudentsAsync(string oauthToken, CreateStudentRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Students", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<StudentResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<StudentResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<StudentResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<StudentResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to remove a course from a training provider
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="courseId"></param>
        public async Task<APIResponse<object>> TrainingProviders_DeleteCourseFromTrainingProviderAsync(string oauthToken, int id, int courseId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/trainingproviders/" + id + "/" + courseId + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Add Course to a training Provider.
        //</summary>
        //<returns>
        // Success, no content
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> TrainingProviders_PostAddCourseToTrainingProviderAsync(string oauthToken, AddCourseToTrainingProviderRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/trainingproviders/addCourse", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Disables TrainingProviders from the system, but does not remove them from the database.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> TrainingProviders_PutDisableTrainingProviderAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/trainingproviders/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets a training provider and their courses
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<TrainingProviderResponse>> TrainingProviders_GetTrainingProviderAsync(string oauthToken, int id, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/TrainingProviders/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TrainingProviderResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<TrainingProviderResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TrainingProviderResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update an existing training provider.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<TrainingProviderResponse[]>> TrainingProviders_PutTrainingProvidersAsync(string oauthToken, int id, TrainingProviderRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/TrainingProviders/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TrainingProviderResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<TrainingProviderResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TrainingProviderResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TrainingProviderResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets all TrainingProviders from the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="skip"></param>
        //<param name="top"></param>
        public async Task<APIResponse<CollectionResponseOfTrainingProviderResponse>> TrainingProviders_GetTrainingProvidersAsync(string oauthToken, int skip, int top)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/TrainingProviders", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CollectionResponseOfTrainingProviderResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CollectionResponseOfTrainingProviderResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CollectionResponseOfTrainingProviderResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Adds a training provider to the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="trainingProvider"></param>
        public async Task<APIResponse<TrainingProviderResponse>> TrainingProviders_PostTrainingProvidersAsync(string oauthToken, TrainingProviderRequest trainingProvider)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/TrainingProviders", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(trainingProvider)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TrainingProviderResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<TrainingProviderResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TrainingProviderResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TrainingProviderResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Edit course to training providers
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="courseRequest"></param>
        public async Task<APIResponse<object>> TrainingProviders_PutEditCoursesToTrainingProvidersAsync(string oauthToken, EditCourseToTrainingProvidersRequest courseRequest)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/TrainingProviders", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(courseRequest)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to reset a password for student/admin
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Users_PostChangePasswordAsync(string oauthToken, string id, ResetPasswordRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/users/" + id + "/password", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Disables an admin from the system, but doesn't remove them from them from the database.
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Users_PutDisableAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/users/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Enables an admin in the system
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Users_PutEnableAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/users/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }
    }     public class SwaggerHTTPClientOptions
    {
        public TimeSpan Timeout { get; }
    
        public SwaggerHTTPClientOptions(TimeSpan timeout)
        {
            Timeout = timeout;
        }
    }
    
    public interface ISwaggerHTTPClient
    {
        Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null);
        Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
    }
    
    class SwaggerHTTPClient : ISwaggerHTTPClient
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "This is done interntionally as each place that calls this will dispose it")]
        private static HttpClient CreateClient()
        {
            var cookieJar = new CookieContainer();
            var httpHandler = new HttpClientHandler
            {
                CookieContainer = cookieJar,
                AllowAutoRedirect = true,
                UseCookies = true
            };
    
            var client = new HttpClient(httpHandler, true);
            client.DefaultRequestHeaders.CacheControl = new CacheControlHeaderValue
            {
                NoCache = true,
                NoStore = true,
                Private = true,
                ProxyRevalidate = true,
                MustRevalidate = true
            };
    
            return client;
        }
    
        public async Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("put", uri, httpOptions, content, token);
    
        public async Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("post", uri, httpOptions, content, token);
    
        private static async Task<HttpResponseMessage> HTTPCallAsync(string method, Uri uri, SwaggerHTTPClientOptions options, HttpContent content = null, string token = null)
        {
            using (var client = CreateClient())
            {
                using (var cancellationTokenSource = new CancellationTokenSource(options.Timeout))
                {
                    var errorMessage = string.Empty;
                    try
                    {
                        if (content != null)
                        {
                            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                        }
    
                        if (!string.IsNullOrWhiteSpace(token))
                        {
                            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
                        }
    
                        var response = default(HttpResponseMessage);
                        switch (method.ToUpperInvariant())
                        {
                            case "DELETE":
                                {
                                    response = await client.DeleteAsync(uri, cancellationTokenSource.Token);
                                    break;
                                }
                            case "POST":
                                {
                                    response = await client.PostAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "PUT":
                                {
                                    response = await client.PutAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "GET":
                                {
                                    response = await client.GetAsync(uri, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
                                    break;
                                }
                            case "HEAD":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseHeadersRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "OPTIONS":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "PATCH":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri,
                                        Content = content
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                        }
    
    #if DEBUG
                                    Debug.WriteLine($"HTTP {method} to {uri} returned {response.StatusCode} with content {await response.Content?.ReadAsStringAsync()}");
    #endif
                        return response;
                    }
                    catch (FileNotFoundException) { errorMessage = $"HTTP {method} exception - file not found exception"; /* this can happen if WP cannot resolve the server */ }
                    catch (WebException) { errorMessage = $"HTTP {method} exception - web exception"; }
                    catch (HttpRequestException) { errorMessage = $"HTTP {method} exception - http exception"; }
                    catch (TaskCanceledException) { errorMessage = $"HTTP {method} exception - task cancelled exception"; }
                    catch (UnauthorizedAccessException) { errorMessage = $"HTTP {method} exception - unauth exception"; }
    
    #if DEBUG
                                Debug.WriteLine(errorMessage);
    #endif
                }
            } 
    
            return null;
        }
    
        public async Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("head", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("options", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null) => await HTTPCallAsync("patch", uri, httpOptions, content, token: token);
    
        public async Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("delete", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("get", uri, httpOptions, token: token);
    }
    
    public class APIResponse<T>
    {
        public APIResponse(dynamic data, HttpStatusCode statusCode) : this(statusCode)
        {
            Data = data;
        }
    
        public APIResponse(T successData, HttpStatusCode statusCode) : this(statusCode)
        {
            SuccessData = successData;
            SuccessDataAvailable = true;
        }
    
        public bool Success { get; }
    
        public APIResponse(bool success)
        {
            Success = success;
        }
    
        public APIResponse(HttpStatusCode statusCode) : this((int)statusCode >= 200 && (int)statusCode <= 299)
        {
            HTTPStatusCode = statusCode;
        }
    
        public dynamic Data { get; }
    
        public T SuccessData { get; }
    
        public HttpStatusCode? HTTPStatusCode { get; }
    
        public bool SuccessDataAvailable { get; }
    }

}