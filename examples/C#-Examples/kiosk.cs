//This file was autogenerated by nSwagger 0.0.1 - changes made to it maybe lost if nSwagger is run again.
namespace nSwagger
{
    using Newtonsoft.Json;
    using System;
    using System.Diagnostics;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Threading;
    using System.Threading.Tasks;

    public class API
    {
        private readonly string url;
        private readonly ISwaggerHTTPClient httpClient;
        public API(string url = null, ISwaggerHTTPClient httpClient = null)
        {
            if (!string.IsNullOrWhiteSpace(url))
            {
                this.url = url;
            }
            else
            {
                this.url = "http://localhost:14446";
            } if  ( httpClient == null ) { this . httpClient  =  new  SwaggerHTTPClient ( ) ;  } else  { this . httpClient  =  httpClient ;  }

        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class SignupRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AdminResponse
        {
            public string Email
            {
                get;
                set;
            }

            public string Id
            {
                get;
                set;
            }

            public enum AdminResponseRole
            {
                User,
                Admin,
                Kitchen,
                Service
            }

            public AdminResponseRole Role
            {
                get;
                set;
            }

            public enum AdminResponseState
            {
                Active,
                Disabled,
                WaitingForPinConfirmation
            }

            public AdminResponseState State
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UpdateCartItemsRequest
        {
            public AddCartItemRequest[] CartItems
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class AddCartItemRequest
        {
            public int CartItem
            {
                get;
                set;
            }

            public int Item
            {
                get;
                set;
            }

            public int Quantity
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CartResponse
        {
            public CartItemResponse[] CartItems
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string OrderNumber
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CartItemResponse
        {
            public int Id
            {
                get;
                set;
            }

            public ItemResponse Item
            {
                get;
                set;
            }

            public double Price
            {
                get;
                set;
            }

            public int Quantity
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ItemResponse
        {
            public string Description
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string Image
            {
                get;
                set;
            }

            public double Price
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class MenuCategoryRequest
        {
            public string ImageId
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class CategoryResponse
        {
            public int Id
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public enum CategoryResponseState
            {
                Active,
                Disabled
            }

            public CategoryResponseState State
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class VerifyUserRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string Pin
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ItemRequest
        {
            public string Description
            {
                get;
                set;
            }

            public string ImageId
            {
                get;
                set;
            }

            public double Price
            {
                get;
                set;
            }

            public string Title
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ResetPasswordRequest
        {
            public string Password
            {
                get;
                set;
            }

            public string Pin
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class LoginRequest
        {
            public string Email
            {
                get;
                set;
            }

            public string Password
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class LoginResponse
        {
            public enum LoginResponseRole
            {
                User,
                Admin,
                Kitchen,
                Service
            }

            public LoginResponseRole Role
            {
                get;
                set;
            }

            public string Token
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class OrderResponse
        {
            public DateTime Date
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public OrderItemResponse[] Items
            {
                get;
                set;
            }

            public string OrderId
            {
                get;
                set;
            }

            public enum OrderResponseState
            {
                NotSubmitted,
                Pending,
                Cancelled,
                Ready,
                Collected,
                Abandoned
            }

            public OrderResponseState State
            {
                get;
                set;
            }

            public double TotalPrice
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class OrderItemResponse
        {
            public int Id
            {
                get;
                set;
            }

            public ItemResponse item
            {
                get;
                set;
            }

            public int OrderId
            {
                get;
                set;
            }

            public double Price
            {
                get;
                set;
            }

            public int Quantity
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class ReportingRequest
        {
            public DateTime EndDate
            {
                get;
                set;
            }

            public enum ReportingRequestOrderStates
            {
                NotSubmitted,
                Pending,
                Cancelled,
                Ready,
                Collected,
                Abandoned
            }

            public ReportingRequestOrderStates OrderStates
            {
                get;
                set;
            }

            public DateTime StartDate
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class TradingHourResponse
        {
            public string Closing
            {
                get;
                set;
            }

            public DateTime Date
            {
                get;
                set;
            }

            public int Id
            {
                get;
                set;
            }

            public string Openning
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class TradingHoursRequest
        {
            public string Closing
            {
                get;
                set;
            }

            public DateTime Date
            {
                get;
                set;
            }

            public string Openning
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UpdateUserRequest
        {
            public string Password
            {
                get;
                set;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("", "RECS0001:Class is declared partial but has only one part", Justification = "This is partial to allow the file to extended in a seperate file if needed. Changes to this file would be lost when the code is regenerated and so supporting a seperate file for this is ideal.")]
        public partial class UpdateUserAdminRequest
        {
            public string Id
            {
                get;
                set;
            }

            public string Email
            {
                get;
                set;
            }

            public enum UpdateUserAdminRequestState
            {
                Active,
                Disabled,
                WaitingForPinConfirmation
            }

            public UpdateUserAdminRequestState State
            {
                get;
                set;
            }

            public enum UpdateUserAdminRequestRole
            {
                User,
                Admin,
                Kitchen,
                Service
            }

            public UpdateUserAdminRequestRole Role
            {
                get;
                set;
            }
        }

        //<summary>
        // Used to create an admin in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Admin_PostNewAdminAsync(string oauthToken, SignupRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/admin/newadmin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // No Content
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Admin_PostNewKitchenAsync(string oauthToken, SignupRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/admin/newkitchen", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Admin_DeleteAdminAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Admin/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get the admins in the system
        //</summary>
        //<returns>
        // {AdminResponse[]}
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<AdminResponse[]>> Admin_GetAdminsAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Admin", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get the delete an item from a card
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="itemId"></param>
        public async Task<APIResponse<object>> Cart_DeleteAsync(string oauthToken, int itemId)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/cart/" + itemId + "/delete", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to change the state of a cart
        //</summary>
        //<returns>
        // No Content
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="orderId"></param>
        //<param name="state"></param>
        public async Task<APIResponse<object>> Cart_PostChangeOrderStateAsync(string oauthToken, int orderId, string state)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/cart/" + orderId + "/" + state + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Cart_PutCartItemsAsync(string oauthToken, int id, UpdateCartItemsRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/cart/" + id + "/update", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get the current not submitted cart for a user
        //</summary>
        //<returns>
        // {API.Models.CartResponse}
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<CartResponse>> Cart_GetAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Cart", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CartResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CartResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<CartResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CartResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CartResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CartResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add an item to the cart
        //</summary>
        //<returns>
        // {API.Models.CartResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Cart_PostCartItemsAsync(string oauthToken, AddCartItemRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Cart", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<Object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(data: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to delete a menu category
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Category_DeleteMenuCategoryAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Category/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to enable a menu category
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Category_EnableMenuCategoryAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Category/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update a categorie in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Category_PutAdminMenuCategoryAsync(string oauthToken, int id, MenuCategoryRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/Category/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get all categories in the system
        //</summary>
        //<returns>
        // {??[]}
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<CategoryResponse[]>> Category_GetCategoriesAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/Category", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<CategoryResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<CategoryResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<CategoryResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<CategoryResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<CategoryResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add a category to the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Category_PostAdminMenuCategoryAsync(string oauthToken, MenuCategoryRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Category", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to verify a user in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> ConfirmUser_PostAsync(string oauthToken, VerifyUserRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/ConfirmUser", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get all items in a category
        //</summary>
        //<returns>
        // {ItemResponse[]}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="category"></param>
        public async Task<APIResponse<ItemResponse[]>> Item_GetMenuItemsAsync(string oauthToken, int category)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/item/" + category + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<ItemResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<ItemResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<ItemResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<ItemResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<ItemResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to enable an item in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Item_PutEnableMenuItemAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/item/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Item_PutItemAsync(string oauthToken, int id, ItemRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/item/" + id + "/update", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to disable an item in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> Item_DeleteMenuItemAsync(string oauthToken, int id)
        {
            {
                var response = await httpClient.DeleteAsync(new Uri(url + "/api/Item/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to add an item to the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Item_PostMenuItemAsync(string oauthToken, ItemRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Item", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 201:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to start the forgot password process
        //</summary>
        //<param name="email"></param>
        public async Task<APIResponse<object>> Login_PostForgotPasswordAsync(string email)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/login/forgotpassword", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(email)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to reset the password
        //</summary>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Login_PostResetPasswordAsync(ResetPasswordRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/login/resetpassword", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to login to the system
        //</summary>
        //<returns>
        // {API.Models.LoginResponse}
        //</returns>
        //<param name="request"></param>
        public async Task<APIResponse<LoginResponse>> Login_PostLoginAsync(LoginRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Login", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<LoginResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<LoginResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<LoginResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<LoginResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<LoginResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to log out of the system
        //</summary>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<object>> Logout_PostLogoutAsync(string oauthToken)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Logout", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the orders in the system by state
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="state"></param>
        public async Task<APIResponse<OrderResponse[]>> Order_GetOrdersByStateAsync(string oauthToken, string state)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/order/" + state + "/getbystate", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<OrderResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }

                    case 4014:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<OrderResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<OrderResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current user orders for today
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<OrderResponse[]>> Order_GetTodayOrdersAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/order/getbydate", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<OrderResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }

                    case 4014:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<OrderResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<OrderResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<OrderResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Gets the current user or supplied user (if admin request) orders
        //</summary>
        //<returns>
        // Success
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="userId"></param>
        public async Task<APIResponse<OrderItemResponse[]>> Order_GetUserOrderHistoryAsync(string oauthToken, string userId)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/order/history", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<OrderItemResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<OrderItemResponse[]>(response.StatusCode);
                    }

                    case 4014:
                    {
                        return new APIResponse<OrderItemResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<OrderItemResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<OrderItemResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<OrderItemResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to get a report for the orders
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Reporting_PostAsync(string oauthToken, ReportingRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Reporting", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to resend confirmation pin
        //</summary>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Signup_PostResendPinAsync(SignupRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/signup/resend", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 202:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to signup for the service
        //</summary>
        //<param name="request"></param>
        public async Task<APIResponse<object>> Signup_PostSignupAsync(SignupRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/Signup", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)));
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 202:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Get all trading hours
        //</summary>
        //<returns>
        // {TradingHourResponse[]}
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<TradingHourResponse[]>> TradingHours_GetTradingHoursAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/TradingHours", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TradingHourResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TradingHourResponse[]>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<TradingHourResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TradingHourResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TradingHourResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // add trading hours
        //</summary>
        //<returns>
        // {TradingHourResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<TradingHourResponse>> TradingHours_PostAddTradingHoursAsync(string oauthToken, TradingHoursRequest request)
        {
            {
                var response = await httpClient.PostAsync(new Uri(url + "/api/TradingHours", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TradingHourResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }

                    case 409:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }

                    case 201:
                    {
                        var data = JsonConvert.DeserializeObject<TradingHourResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TradingHourResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Update add trading hours
        //</summary>
        //<returns>
        // {TradingHourResponse}
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="request"></param>
        public async Task<APIResponse<TradingHourResponse>> TradingHours_PutUpdateTradingHoursAsync(string oauthToken, int id, TradingHoursRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/api/TradingHours/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<TradingHourResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }

                    case 404:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }

                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<TradingHourResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<TradingHourResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<TradingHourResponse>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to disable in the admin in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> User_PutDisableAdminAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/user/" + id + "/disable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to disable in the admin in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<object>> User_PutEnableAdminAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/user/" + id + "/enable", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to edit user password in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> User_PutUserAsync(string oauthToken, UpdateUserRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/user/passwordedit", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 400:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to edit user account by admin in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="request"></param>
        public async Task<APIResponse<object>> User_PutUserAdminAsync(string oauthToken, UpdateUserAdminRequest request)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/user/edit", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), new StringContent(JsonConvert.SerializeObject(request)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<summary>
        // Used to update user role in the system
        //</summary>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        //<param name="role"></param>
        public async Task<APIResponse<object>> User_PutUserRoleAsync(string oauthToken, string id, string role)
        {
            {
                var response = await httpClient.PutAsync(new Uri(url + "/user/" + id + "/" + role + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<object>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 401:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }

                    case 204:
                    {
                        var data = JsonConvert.DeserializeObject<object>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<object>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<object>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        public async Task<APIResponse<AdminResponse[]>> User_GetAllUsersAsync(string oauthToken)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/User", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse[]>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse[]>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse[]>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse[]>(response.StatusCode);
                    }
                }
            }
        }

        //<returns>
        // OK
        //</returns>
        //<param name="oauthToken"></param>
        //<param name="id"></param>
        public async Task<APIResponse<AdminResponse>> User_GetUserAsync(string oauthToken, string id)
        {
            {
                var response = await httpClient.GetAsync(new Uri(url + "/api/User/" + id + "", UriKind.Absolute), new SwaggerHTTPClientOptions(TimeSpan.FromSeconds(30)), token: oauthToken);
                if (response == null)
                {
                    return new APIResponse<AdminResponse>(false);
                }

                switch ((int)response.StatusCode)
                {
                    case 200:
                    {
                        var data = JsonConvert.DeserializeObject<AdminResponse>(await response.Content.ReadAsStringAsync());
                        return new APIResponse<AdminResponse>(successData: data, statusCode: response.StatusCode);
                    }

                    default:
                    {
                        return new APIResponse<AdminResponse>(response.StatusCode);
                    }
                }
            }
        }
    }     public class SwaggerHTTPClientOptions
    {
        public TimeSpan Timeout { get; }
    
        public SwaggerHTTPClientOptions(TimeSpan timeout)
        {
            Timeout = timeout;
        }
    }
    
    public interface ISwaggerHTTPClient
    {
        Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null);
        Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null);
        Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
        Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null);
    }
    
    class SwaggerHTTPClient : ISwaggerHTTPClient
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic"), System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "This is done interntionally as each place that calls this will dispose it")]
        private static HttpClient CreateClient()
        {
            var cookieJar = new CookieContainer();
            var httpHandler = new HttpClientHandler
            {
                CookieContainer = cookieJar,
                AllowAutoRedirect = true,
                UseCookies = true
            };
    
            var client = new HttpClient(httpHandler, true);
            client.DefaultRequestHeaders.CacheControl = new CacheControlHeaderValue
            {
                NoCache = true,
                NoStore = true,
                Private = true,
                ProxyRevalidate = true,
                MustRevalidate = true
            };
    
            return client;
        }
    
        public async Task<HttpResponseMessage> PutAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("put", uri, httpOptions, content, token);
    
        public async Task<HttpResponseMessage> PostAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content = null, string token = null) => await HTTPCallAsync("post", uri, httpOptions, content, token);
    
        private static async Task<HttpResponseMessage> HTTPCallAsync(string method, Uri uri, SwaggerHTTPClientOptions options, HttpContent content = null, string token = null)
        {
            using (var client = CreateClient())
            {
                using (var cancellationTokenSource = new CancellationTokenSource(options.Timeout))
                {
                    var errorMessage = string.Empty;
                    try
                    {
                        if (content != null)
                        {
                            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                        }
    
                        if (!string.IsNullOrWhiteSpace(token))
                        {
                            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
                        }
    
                        var response = default(HttpResponseMessage);
                        switch (method.ToUpperInvariant())
                        {
                            case "DELETE":
                                {
                                    response = await client.DeleteAsync(uri, cancellationTokenSource.Token);
                                    break;
                                }
                            case "POST":
                                {
                                    response = await client.PostAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "PUT":
                                {
                                    response = await client.PutAsync(uri, content, cancellationTokenSource.Token);
                                    break;
                                }
                            case "GET":
                                {
                                    response = await client.GetAsync(uri, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
                                    break;
                                }
                            case "HEAD":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseHeadersRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "OPTIONS":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                            case "PATCH":
                                {
                                    response = await client.SendAsync(new HttpRequestMessage
                                    {
                                        Method = new HttpMethod(method),
                                        RequestUri = uri,
                                        Content = content
                                    }, HttpCompletionOption.ResponseContentRead, cancellationTokenSource.Token);
    
                                    break;
                                }
                        }
    
    #if DEBUG
                                    Debug.WriteLine($"HTTP {method} to {uri} returned {response.StatusCode} with content {await response.Content?.ReadAsStringAsync()}");
    #endif
                        return response;
                    }
                    catch (FileNotFoundException) { errorMessage = $"HTTP {method} exception - file not found exception"; /* this can happen if WP cannot resolve the server */ }
                    catch (WebException) { errorMessage = $"HTTP {method} exception - web exception"; }
                    catch (HttpRequestException) { errorMessage = $"HTTP {method} exception - http exception"; }
                    catch (TaskCanceledException) { errorMessage = $"HTTP {method} exception - task cancelled exception"; }
                    catch (UnauthorizedAccessException) { errorMessage = $"HTTP {method} exception - unauth exception"; }
    
    #if DEBUG
                                Debug.WriteLine(errorMessage);
    #endif
                }
            } 
    
            return null;
        }
    
        public async Task<HttpResponseMessage> HeadAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("head", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> OptionsAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("options", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> PatchAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, HttpContent content, string token = null) => await HTTPCallAsync("patch", uri, httpOptions, content, token: token);
    
        public async Task<HttpResponseMessage> DeleteAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("delete", uri, httpOptions, token: token);
    
        public async Task<HttpResponseMessage> GetAsync(Uri uri, SwaggerHTTPClientOptions httpOptions, string token = null) => await HTTPCallAsync("get", uri, httpOptions, token: token);
    }
    
    public class APIResponse<T>
    {
        public APIResponse(dynamic data, HttpStatusCode statusCode) : this(statusCode)
        {
            Data = data;
        }
    
        public APIResponse(T successData, HttpStatusCode statusCode) : this(statusCode)
        {
            SuccessData = successData;
            SuccessDataAvailable = true;
        }
    
        public bool Success { get; }
    
        public APIResponse(bool success)
        {
            Success = success;
        }
    
        public APIResponse(HttpStatusCode statusCode) : this((int)statusCode >= 200 && (int)statusCode <= 299)
        {
            HTTPStatusCode = statusCode;
        }
    
        public dynamic Data { get; }
    
        public T SuccessData { get; }
    
        public HttpStatusCode? HTTPStatusCode { get; }
    
        public bool SuccessDataAvailable { get; }
    }

}