//nSwaggerVersion:0.0.6
// This file was automatically generated by nSwagger. Changes made to this file will be lost if nSwagger is run again. See https://github.com/rmaclean/nswagger for more information.
// This file was last generated at: 2016-04-08T12:39:09.8974860Z
namespace nSwagger {
    export module Portal {
        export interface IAdminResponse {
            Email: string;
            FirstName: string;
            Id: string;
            LastName: string;
            Self: boolean;
            State: string;
        }

        export class AdminResponse implements IAdminResponse {
            Email: string;
            FirstName: string;
            Id: string;
            LastName: string;
            Self: boolean;
            State: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): AdminResponseState {
                return AdminResponseState[this.State];
            }

            set StateAsEnum(value:AdminResponseState) {
                this.State = AdminResponseState[value];
            }
        }

        export enum AdminResponseState {
            WaitingForPinConfirm,
            Active,
            Disabled
        }

        export interface IUpdateAdminRequest {
            FirstName: string;
            LastName: string;
        }

        export interface IFilterParameters {
            Skip: number;
            Top: number;
        }

        export interface ICollectionResponseAdminResponse {
            Items: Array<IAdminResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface INewAdminRequest {
            Email: string;
            FirstName: string;
            LastName: string;
        }

        export interface IStudentCalendarInfomationRequest {
            End: string;
            Start: string;
        }

        export interface ICalendarResponse {
            EndDate: string;
            Id: number;
            StartDate: string;
            State: string;
            Type: string;
            User: IUser;
        }

        export class CalendarResponse implements ICalendarResponse {
            EndDate: string;
            Id: number;
            StartDate: string;
            State: string;
            Type: string;
            User: IUser;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): CalendarResponseState {
                return CalendarResponseState[this.State];
            }

            set StateAsEnum(value:CalendarResponseState) {
                this.State = CalendarResponseState[value];
            }

            get TypeAsEnum(): CalendarResponseType {
                return CalendarResponseType[this.Type];
            }

            set TypeAsEnum(value:CalendarResponseType) {
                this.Type = CalendarResponseType[value];
            }
        }

        export enum CalendarResponseState {
            Active
        }

        export enum CalendarResponseType {
            Course,
            Exam
        }

        export interface IUser {
            AmountLastStipendReceived: number;
            City: string;
            DateLastStipendReceived: string;
            DropOutDate: string;
            DropOutReason: string;
            Email: string;
            FirstName: string;
            FurtherEmploymentCompanyName: string;
            FurtherEmploymentEmail: string;
            FurtherEmploymentEndDate: string;
            FurtherEmploymentManagerName: string;
            FurtherEmploymentPhoneNumber: string;
            FurtherEmploymentPosition: string;
            FurtherEmploymentStartDate: string;
            HomeAddressLine1: string;
            HomeAddressLine2: string;
            HomeAddressLine3: string;
            HostEmployer: IHostEmployer;
            HostEmployerManagerEmail: string;
            HostEmployerManagerName: string;
            HostEmployerManagerPhone: string;
            Id: string;
            ImageId: string;
            LastName: string;
            NextOfKinEmail: string;
            NextOfKinFirstName: string;
            NextOfKinLastName: string;
            NextOfKinPhoneNumber: string;
            NextOfKinRelationship: string;
            PasswordHash: string;
            PasswordResetToken: string;
            PasswordSalt: string;
            PasswordVersion: string;
            PhoneNumber: string;
            Province: string;
            Role: string;
            StartDate: string;
            State: string;
            Students: Array<IUser>;
            StudentState: string;
        }

        export class User implements IUser {
            AmountLastStipendReceived: number;
            City: string;
            DateLastStipendReceived: string;
            DropOutDate: string;
            DropOutReason: string;
            Email: string;
            FirstName: string;
            FurtherEmploymentCompanyName: string;
            FurtherEmploymentEmail: string;
            FurtherEmploymentEndDate: string;
            FurtherEmploymentManagerName: string;
            FurtherEmploymentPhoneNumber: string;
            FurtherEmploymentPosition: string;
            FurtherEmploymentStartDate: string;
            HomeAddressLine1: string;
            HomeAddressLine2: string;
            HomeAddressLine3: string;
            HostEmployer: IHostEmployer;
            HostEmployerManagerEmail: string;
            HostEmployerManagerName: string;
            HostEmployerManagerPhone: string;
            Id: string;
            ImageId: string;
            LastName: string;
            NextOfKinEmail: string;
            NextOfKinFirstName: string;
            NextOfKinLastName: string;
            NextOfKinPhoneNumber: string;
            NextOfKinRelationship: string;
            PasswordHash: string;
            PasswordResetToken: string;
            PasswordSalt: string;
            PasswordVersion: string;
            PhoneNumber: string;
            Province: string;
            Role: string;
            StartDate: string;
            State: string;
            Students: Array<IUser>;
            StudentState: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get PasswordVersionAsEnum(): UserPasswordVersion {
                return UserPasswordVersion[this.PasswordVersion];
            }

            set PasswordVersionAsEnum(value:UserPasswordVersion) {
                this.PasswordVersion = UserPasswordVersion[value];
            }

            get RoleAsEnum(): UserRole {
                return UserRole[this.Role];
            }

            set RoleAsEnum(value:UserRole) {
                this.Role = UserRole[value];
            }

            get StateAsEnum(): UserState {
                return UserState[this.State];
            }

            set StateAsEnum(value:UserState) {
                this.State = UserState[value];
            }

            get StudentStateAsEnum(): UserStudentState {
                return UserStudentState[this.StudentState];
            }

            set StudentStateAsEnum(value:UserStudentState) {
                this.StudentState = UserStudentState[value];
            }
        }

        export enum UserPasswordVersion {
            Version1
        }

        export enum UserRole {
            Student,
            Admin
        }

        export enum UserState {
            WaitingForPinConfirm,
            Active,
            Disabled
        }

        export enum UserStudentState {
            NotAStudent,
            Active,
            DroppedOut,
            Employeed,
            AwaitSignup
        }

        export interface IHostEmployer {
            Id: number;
            Name: string;
            State: string;
            Students: Array<IUser>;
        }

        export class HostEmployer implements IHostEmployer {
            Id: number;
            Name: string;
            State: string;
            Students: Array<IUser>;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): HostEmployerState {
                return HostEmployerState[this.State];
            }

            set StateAsEnum(value:HostEmployerState) {
                this.State = HostEmployerState[value];
            }
        }

        export enum HostEmployerState {
            Active,
            Disabled
        }

        export interface ICalendarShareRequest {
            Email: string;
        }

        export interface ICollectionResponseCalendarResponse {
            Items: Array<ICalendarResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ICalendarRequest {
            EndDate: string;
            EventId: number;
            StartDate: string;
            Type: string;
        }

        export class CalendarRequest implements ICalendarRequest {
            EndDate: string;
            EventId: number;
            StartDate: string;
            Type: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get TypeAsEnum(): CalendarRequestType {
                return CalendarRequestType[this.Type];
            }

            set TypeAsEnum(value:CalendarRequestType) {
                this.Type = CalendarRequestType[value];
            }
        }

        export enum CalendarRequestType {
            Course,
            Exam
        }

        export interface IAddStudentToCourseRequest {
            CourseId: number;
            StudentId: string;
        }

        export interface ICollectionResponseCourseResponse {
            Items: Array<ICourseResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ICourseResponse {
            Code: string;
            Id: number;
            Name: string;
            State: string;
            Students: Array<IStudentResponse>;
        }

        export class CourseResponse implements ICourseResponse {
            Code: string;
            Id: number;
            Name: string;
            State: string;
            Students: Array<IStudentResponse>;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): CourseResponseState {
                return CourseResponseState[this.State];
            }

            set StateAsEnum(value:CourseResponseState) {
                this.State = CourseResponseState[value];
            }
        }

        export enum CourseResponseState {
            Active,
            Disabled
        }

        export interface IStudentResponse {
            City: string;
            Email: string;
            FirstName: string;
            HomeAddressLine1: string;
            HomeAddressLine2: string;
            HomeAddressLine3: string;
            Id: string;
            Image: string;
            LastName: string;
            NextOfKinEmail: string;
            NextOfKinFirstName: string;
            NextOfKinLastName: string;
            NextOfKinPhoneNumber: string;
            NextOfKinRelationship: string;
            PhoneNumber: string;
            Province: string;
            State: string;
            StudentState: string;
        }

        export class StudentResponse implements IStudentResponse {
            City: string;
            Email: string;
            FirstName: string;
            HomeAddressLine1: string;
            HomeAddressLine2: string;
            HomeAddressLine3: string;
            Id: string;
            Image: string;
            LastName: string;
            NextOfKinEmail: string;
            NextOfKinFirstName: string;
            NextOfKinLastName: string;
            NextOfKinPhoneNumber: string;
            NextOfKinRelationship: string;
            PhoneNumber: string;
            Province: string;
            State: string;
            StudentState: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): StudentResponseState {
                return StudentResponseState[this.State];
            }

            set StateAsEnum(value:StudentResponseState) {
                this.State = StudentResponseState[value];
            }

            get StudentStateAsEnum(): StudentResponseStudentState {
                return StudentResponseStudentState[this.StudentState];
            }

            set StudentStateAsEnum(value:StudentResponseStudentState) {
                this.StudentState = StudentResponseStudentState[value];
            }
        }

        export enum StudentResponseState {
            WaitingForPinConfirm,
            Active,
            Disabled
        }

        export enum StudentResponseStudentState {
            NotAStudent,
            Active,
            DroppedOut,
            Employeed,
            AwaitSignup
        }

        export interface ICourseRequest {
            Code: string;
            Name: string;
        }

        export interface ICollectionResponseDroppedOutResponse {
            Items: Array<IDroppedOutResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IDroppedOutResponse {
            AmountLastStipendRecieved: number;
            DateLastStipendRecieved: string;
            DropOutReason: string;
            DroppedOutDate: string;
        }

        export interface IDroppedOutRequest {
            AmountLastStipendRecieved: number;
            DateLastStipendRecieved: string;
            DropOutReason: string;
            DroppedOutDate: string;
        }

        export interface IAddStudentToExamRequest {
            ExamId: number;
            StudentId: string;
        }

        export interface ICollectionResponseExamResponse {
            Items: Array<IExamResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IExamResponse {
            Code: string;
            ExamName: string;
            Id: number;
            Passed: string;
            Result: string;
            State: string;
            Student: IUser;
            Students: Array<IStudentResponse>;
        }

        export class ExamResponse implements IExamResponse {
            Code: string;
            ExamName: string;
            Id: number;
            Passed: string;
            Result: string;
            State: string;
            Student: IUser;
            Students: Array<IStudentResponse>;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get PassedAsEnum(): ExamResponsePassed {
                return ExamResponsePassed[this.Passed];
            }

            set PassedAsEnum(value:ExamResponsePassed) {
                this.Passed = ExamResponsePassed[value];
            }

            get StateAsEnum(): ExamResponseState {
                return ExamResponseState[this.State];
            }

            set StateAsEnum(value:ExamResponseState) {
                this.State = ExamResponseState[value];
            }
        }

        export enum ExamResponsePassed {
            Passed,
            Failed
        }

        export enum ExamResponseState {
            Active,
            Disabled
        }

        export interface IExamRequest {
            Code: string;
            Name: string;
        }

        export interface ICollectionResponseFeedbackResponse {
            Items: Array<IFeedbackResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IFeedbackResponse {
            Comment: string;
            RepliedAt: string;
            RepliedBy: IUser;
            State: string;
            User: IStudentResponse;
        }

        export class FeedbackResponse implements IFeedbackResponse {
            Comment: string;
            RepliedAt: string;
            RepliedBy: IUser;
            State: string;
            User: IStudentResponse;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): FeedbackResponseState {
                return FeedbackResponseState[this.State];
            }

            set StateAsEnum(value:FeedbackResponseState) {
                this.State = FeedbackResponseState[value];
            }
        }

        export enum FeedbackResponseState {
            Replied,
            Pending
        }

        export interface IFeedbackRequest {
            Comment: string;
        }

        export interface ICollectionResponseFurtherEmploymentResponse {
            Items: Array<IFurtherEmploymentResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IFurtherEmploymentResponse {
            FurtherEmploymentCompanyName: string;
            FurtherEmploymentEmail: string;
            FurtherEmploymentEndDate: string;
            FurtherEmploymentManagerName: string;
            FurtherEmploymentManagerPhoneNumber: string;
            FurtherEmploymentPosition: string;
            FurtherEmploymentStartDate: string;
            Students: Array<IStudentResponse>;
        }

        export interface IFurtherEmploymentRequest {
            CompanyName: string;
            Email: string;
            EndDate: string;
            ManagerName: string;
            PhoneNumber: string;
            Position: string;
            StartDate: string;
        }

        export interface IHostEmployerResponse {
            Id: number;
            Name: string;
            State: string;
            Students: Array<IStudentResponse>;
        }

        export class HostEmployerResponse implements IHostEmployerResponse {
            Id: number;
            Name: string;
            State: string;
            Students: Array<IStudentResponse>;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): HostEmployerResponseState {
                return HostEmployerResponseState[this.State];
            }

            set StateAsEnum(value:HostEmployerResponseState) {
                this.State = HostEmployerResponseState[value];
            }
        }

        export enum HostEmployerResponseState {
            Active,
            Disabled
        }

        export interface IHostEmployerRequest {
            Name: string;
        }

        export interface ICollectionResponseHostEmployerResponse {
            Items: Array<IHostEmployerResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IConfirmPasswordResetRequest {
            Password: string;
            Token: string;
        }

        export interface IBeginPasswordResetRequest {
            Email: string;
        }

        export interface ILoginRequest {
            Email: string;
            Password: string;
        }

        export interface ILoginResponse {
            Role: string;
            StudentState: string;
            Token: string;
        }

        export class LoginResponse implements ILoginResponse {
            Role: string;
            StudentState: string;
            Token: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RoleAsEnum(): LoginResponseRole {
                return LoginResponseRole[this.Role];
            }

            set RoleAsEnum(value:LoginResponseRole) {
                this.Role = LoginResponseRole[value];
            }

            get StudentStateAsEnum(): LoginResponseStudentState {
                return LoginResponseStudentState[this.StudentState];
            }

            set StudentStateAsEnum(value:LoginResponseStudentState) {
                this.StudentState = LoginResponseStudentState[value];
            }
        }

        export enum LoginResponseRole {
            Student,
            Admin
        }

        export enum LoginResponseStudentState {
            NotAStudent,
            Active,
            DroppedOut,
            Employeed,
            AwaitSignup
        }

        export interface ICollectionResponseClaimedRewardsResponse {
            Items: Array<IClaimedRewardsResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IClaimedRewardsResponse {
            Claimed: string;
            Id: number;
            Reward: IRewardResponse;
            Student: IStudentResponse;
        }

        export interface IRewardResponse {
            Description: string;
            Id: number;
            ImageId: string;
            Name: string;
            RewardedWhen: string;
            State: string;
            students: Array<IStudentResponse>;
        }

        export class RewardResponse implements IRewardResponse {
            Description: string;
            Id: number;
            ImageId: string;
            Name: string;
            RewardedWhen: string;
            State: string;
            students: Array<IStudentResponse>;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): RewardResponseState {
                return RewardResponseState[this.State];
            }

            set StateAsEnum(value:RewardResponseState) {
                this.State = RewardResponseState[value];
            }
        }

        export enum RewardResponseState {
            Active,
            Disable
        }

        export interface IRewardRequest {
            Description: string;
            ImageId: string;
            Name: string;
            RewardedWhen: string;
        }

        export interface ICollectionResponseRewardResponse {
            Items: Array<IRewardResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ICollectionResponseTrainingProviderResponse {
            Items: Array<ITrainingProviderResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ITrainingProviderResponse {
            Courses: Array<ICourseResponse>;
            Exams: Array<IExamResponse>;
            Id: number;
            Name: string;
            State: string;
        }

        export class TrainingProviderResponse implements ITrainingProviderResponse {
            Courses: Array<ICourseResponse>;
            Exams: Array<IExamResponse>;
            Id: number;
            Name: string;
            State: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): TrainingProviderResponseState {
                return TrainingProviderResponseState[this.State];
            }

            set StateAsEnum(value:TrainingProviderResponseState) {
                this.State = TrainingProviderResponseState[value];
            }
        }

        export enum TrainingProviderResponseState {
            Active,
            Disabled
        }

        export interface IAddStudentsToExamsRequest {
            ExamId: number;
            TrainingProviderId: number;
        }

        export interface IStudentsRequest {
            City: string;
            Email: string;
            FirstName: string;
            HomeAddressLine1: string;
            HomeAddressLine2: string;
            HomeAddressLine3: string;
            Id: string;
            LastName: string;
            NextOfKinEmail: string;
            NextOfKinFirstName: string;
            NextOfKinLastName: string;
            NextOfKinPhoneNumber: string;
            NextOfKinRelationship: string;
            PhoneNumber: string;
            Province: string;
        }

        export interface ICollectionResponseStudentResponse {
            Items: Array<IStudentResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ICreateStudentRequest {
            Email: string;
        }

        export interface IAddCourseToTrainingProviderRequest {
            CourseId: number;
            TrainingProviderId: number;
        }

        export interface ITrainingProviderRequest {
            Name: string;
        }

        export interface IEditCourseToTrainingProvidersRequest {
            CourseId: number;
            TrainingProvidersId: number;
        }

        export interface IResetPasswordRequest {
            Password: string;
        }

        export interface IAdmins_GetAdminRequest {
            id: string;
        }

        export interface IAdmins_PutUpdateAdminRequest {
            id: string;
            request: IUpdateAdminRequest;
        }

        export interface IAdmins_GetAdminsRequest {
            skip?: number;
            top?: number;
        }

        export interface IAdmins_PostAdminsRequest {
            request: INewAdminRequest;
        }

        export interface ICalendar_PostStudentCalendarInformationRequest {
            request: IStudentCalendarInfomationRequest;
            id: string;
        }

        export interface ICalendar_PostShareCalendarRequest {
            request: ICalendarShareRequest;
        }

        export interface ICalendar_DeleteCalendarEntryRequest {
            id: number;
        }

        export interface ICalendar_GetCalendarRequest {
            skip?: number;
            top?: number;
        }

        export interface ICalendar_PostUserCalendarRequest {
            calendar: ICalendarRequest;
        }

        export interface ICourses_PostAddStudentsToCourseRequest {
            request: IAddStudentToCourseRequest;
        }

        export interface ICourses_PutDisableCourseRequest {
            id: number;
        }

        export interface ICourses_PutEnableCourseRequest {
            id: number;
        }

        export interface ICourses_GetCoursesRequest {
            skip?: number;
            top?: number;
        }

        export interface ICourses_PostAddCourseRequest {
            course: ICourseRequest;
        }

        export interface ICourses_GetSingleCourseRequest {
            id: number;
        }

        export interface ICourses_PutCourseRequest {
            id: number;
            request: ICourseRequest;
        }

        export interface IDroppedOut_GetDroppedOutRequest {
            skip?: number;
            top?: number;
        }

        export interface IDroppedOut_GetDroppedOutStudentRequest {
            id: string;
        }

        export interface IDroppedOut_PostDroppedOutRequest {
            id: string;
            request: IDroppedOutRequest;
        }

        export interface IExam_PostAddStudentToExamRequest {
            request: IAddStudentToExamRequest;
        }

        export interface IExam_PutDisableExamRequest {
            id: number;
        }

        export interface IExam_PutEnableExamRequest {
            id: number;
        }

        export interface IExam_GetExamsRequest {
            skip?: number;
            top?: number;
        }

        export interface IExam_PostExamsRequest {
            exam: IExamRequest;
        }

        export interface IExam_GetSingleExamRequest {
            id: number;
        }

        export interface IExam_PutExamRequest {
            id: number;
            request: IExamRequest;
        }

        export interface IFeedback_GetAllFeedbackRequest {
            skip?: number;
            top?: number;
        }

        export interface IFeedback_PostFeedbackRequest {
            feedback: IFeedbackRequest;
        }

        export interface IFeedback_GetSingleFeedbackRequest {
            id: number;
        }

        export interface IFurtherEmployment_GetAllStudentsWithFurtherEmploymentRequest {
            since?: string;
            skip?: number;
            top?: number;
        }

        export interface IFurtherEmployment_GetStudentWithFurtherEmploymentRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IFurtherEmployment_PostFurtherEmploymentRequest {
            id: string;
            request: IFurtherEmploymentRequest;
        }

        export interface IHostEmployer_PostAssociateStudentToHostEmployeerRequest {
            studentId: string;
            hostEmployerId: number;
        }

        export interface IHostEmployer_PutDisableHostEmployerRequest {
            id: number;
        }

        export interface IHostEmployer_PutEnableHostEmployerRequest {
            id: number;
        }

        export interface IHostEmployer_GetHostEmployerRequest {
            id: number;
            skip?: number;
            top?: number;
        }

        export interface IHostEmployer_PutHostEmployerRequest {
            id: number;
            request: IHostEmployerRequest;
        }

        export interface IHostEmployer_GetHostEmployersRequest {
            skip?: number;
            top?: number;
        }

        export interface IHostEmployer_PostAddHostEmployerRequest {
            hostEmployer: IHostEmployerRequest;
        }

        export interface ILogin_PostConfirmPasswordResetRequest {
            request: IConfirmPasswordResetRequest;
        }

        export interface ILogin_PostStartPasswordResetRequest {
            request: IBeginPasswordResetRequest;
        }

        export interface ILogin_PostLoginRequest {
            request: ILoginRequest;
        }

        export interface IReward_GetStudentRewardRequest {
            userId: string;
            date?: string;
            skip?: number;
            top?: number;
        }

        export interface IReward_PostAssociateStudentToRewardRequest {
            studentId: string;
            rewardsId: number;
        }

        export interface IReward_PutDisableRewardsRequest {
            id: number;
        }

        export interface IReward_PutEnableRewardsRequest {
            id: number;
        }

        export interface IReward_GetRewardsRequest {
            id: number;
        }

        export interface IReward_SetRewardStateRequest {
            id: number;
            requiredState: string;
            requestedState: string;
        }

        export interface IReward_PutStudentRewardRequest {
            id: number;
            request: IRewardRequest;
        }

        export interface IReward_PostAddStudentRewardRequest {
            reward: IRewardRequest;
        }

        export interface IShareCalendar_GetShareCalendarRequest {
            id: string;
            startDate: string;
            skip?: number;
            top?: number;
        }

        export interface IStudents_GetStudentRewardsRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IStudents_GetTrainingProvidersRequest {
            id: string;
            param?: IFilterParameters;
        }

        export interface IStudents_PostAddExamsToStudentsRequest {
            request: IAddStudentsToExamsRequest;
        }

        export interface IStudents_PostStudentInformationRequest {
            id: string;
            student: IStudentsRequest;
        }

        export interface IStudents_GetStudentRequest {
            id: string;
        }

        export interface IStudents_PutStudentRequest {
            id: string;
            request: IStudentsRequest;
        }

        export interface IStudents_GetStudentsRequest {
            skip?: number;
            top?: number;
        }

        export interface IStudents_PostStudentsRequest {
            request: ICreateStudentRequest;
        }

        export interface ITrainingProviders_DeleteCourseFromTrainingProviderRequest {
            id: number;
            courseId: number;
        }

        export interface ITrainingProviders_PostAddCourseToTrainingProviderRequest {
            request: IAddCourseToTrainingProviderRequest;
        }

        export interface ITrainingProviders_PostAssociateStudentToTrainingProviderRequest {
            studentId: string;
            trainingProviderId: number;
        }

        export interface ITrainingProviders_PutDisableTrainingProviderRequest {
            id: number;
        }

        export interface ITrainingProviders_PutEnableTrainingProviderRequest {
            id: number;
        }

        export interface ITrainingProviders_GetTrainingProviderRequest {
            id: number;
            skip?: number;
            top?: number;
        }

        export interface ITrainingProviders_PutTrainingProvidersRequest {
            id: number;
            request: ITrainingProviderRequest;
        }

        export interface ITrainingProviders_GetTrainingProvidersRequest {
            skip?: number;
            top?: number;
        }

        export interface ITrainingProviders_PostTrainingProvidersRequest {
            trainingProvider: ITrainingProviderRequest;
        }

        export interface ITrainingProviders_PutEditCoursesToTrainingProvidersRequest {
            courseRequest: IEditCourseToTrainingProvidersRequest;
        }

        export interface IUsers_PostChangePasswordRequest {
            id: string;
            request: IResetPasswordRequest;
        }

        export interface IUsers_PutDisableRequest {
            id: string;
        }

        export interface IUsers_PutEnableRequest {
            id: string;
        }

        export interface API {
            setToken(value: string, headerOrQueryName: string, isQuery: boolean): void;
            Admins_GetAdmin(parameters: IAdmins_GetAdminRequest): PromiseLike<IAdminResponse>;
            Admins_PutUpdateAdmin(parameters: IAdmins_PutUpdateAdminRequest): PromiseLike<void>;
            Admins_GetAdmins(parameters?: IAdmins_GetAdminsRequest): PromiseLike<ICollectionResponseAdminResponse>;
            Admins_PostAdmins(parameters: IAdmins_PostAdminsRequest): PromiseLike<IAdminResponse>;
            Calendar_PostStudentCalendarInformation(parameters: ICalendar_PostStudentCalendarInformationRequest): PromiseLike<Array<ICalendarResponse>>;
            Calendar_PostShareCalendar(parameters: ICalendar_PostShareCalendarRequest): PromiseLike<void>;
            Calendar_DeleteCalendarEntry(parameters: ICalendar_DeleteCalendarEntryRequest): PromiseLike<void>;
            Calendar_GetCalendar(parameters?: ICalendar_GetCalendarRequest): PromiseLike<ICollectionResponseCalendarResponse>;
            Calendar_PostUserCalendar(parameters: ICalendar_PostUserCalendarRequest): PromiseLike<ICalendarResponse>;
            Courses_PostAddStudentsToCourse(parameters: ICourses_PostAddStudentsToCourseRequest): PromiseLike<void>;
            Courses_PutDisableCourse(parameters: ICourses_PutDisableCourseRequest): PromiseLike<void>;
            Courses_PutEnableCourse(parameters: ICourses_PutEnableCourseRequest): PromiseLike<void>;
            Courses_GetCourses(parameters?: ICourses_GetCoursesRequest): PromiseLike<ICollectionResponseCourseResponse>;
            Courses_PostAddCourse(parameters: ICourses_PostAddCourseRequest): PromiseLike<ICourseResponse>;
            Courses_GetSingleCourse(parameters: ICourses_GetSingleCourseRequest): PromiseLike<ICourseResponse>;
            Courses_PutCourse(parameters: ICourses_PutCourseRequest): PromiseLike<void>;
            DroppedOut_GetDroppedOut(parameters?: IDroppedOut_GetDroppedOutRequest): PromiseLike<ICollectionResponseDroppedOutResponse>;
            DroppedOut_GetDroppedOutStudent(parameters: IDroppedOut_GetDroppedOutStudentRequest): PromiseLike<IDroppedOutResponse>;
            DroppedOut_PostDroppedOut(parameters: IDroppedOut_PostDroppedOutRequest): PromiseLike<void>;
            Exam_PostAddStudentToExam(parameters: IExam_PostAddStudentToExamRequest): PromiseLike<void>;
            Exam_PutDisableExam(parameters: IExam_PutDisableExamRequest): PromiseLike<void>;
            Exam_PutEnableExam(parameters: IExam_PutEnableExamRequest): PromiseLike<void>;
            Exam_GetExams(parameters?: IExam_GetExamsRequest): PromiseLike<ICollectionResponseExamResponse>;
            Exam_PostExams(parameters: IExam_PostExamsRequest): PromiseLike<IExamResponse>;
            Exam_GetSingleExam(parameters: IExam_GetSingleExamRequest): PromiseLike<IExamResponse>;
            Exam_PutExam(parameters: IExam_PutExamRequest): PromiseLike<void>;
            Feedback_GetAllFeedback(parameters?: IFeedback_GetAllFeedbackRequest): PromiseLike<ICollectionResponseFeedbackResponse>;
            Feedback_PostFeedback(parameters: IFeedback_PostFeedbackRequest): PromiseLike<IFeedbackResponse>;
            Feedback_GetSingleFeedback(parameters: IFeedback_GetSingleFeedbackRequest): PromiseLike<IFeedbackResponse>;
            FurtherEmployment_GetAllStudentsWithFurtherEmployment(parameters?: IFurtherEmployment_GetAllStudentsWithFurtherEmploymentRequest): PromiseLike<ICollectionResponseFurtherEmploymentResponse>;
            FurtherEmployment_GetStudentWithFurtherEmployment(parameters: IFurtherEmployment_GetStudentWithFurtherEmploymentRequest): PromiseLike<IFurtherEmploymentResponse>;
            FurtherEmployment_PostFurtherEmployment(parameters: IFurtherEmployment_PostFurtherEmploymentRequest): PromiseLike<void>;
            Health_Get(): PromiseLike<any>;
            HostEmployer_PostAssociateStudentToHostEmployeer(parameters: IHostEmployer_PostAssociateStudentToHostEmployeerRequest): PromiseLike<void>;
            HostEmployer_PutDisableHostEmployer(parameters: IHostEmployer_PutDisableHostEmployerRequest): PromiseLike<void>;
            HostEmployer_PutEnableHostEmployer(parameters: IHostEmployer_PutEnableHostEmployerRequest): PromiseLike<void>;
            HostEmployer_GetHostEmployer(parameters: IHostEmployer_GetHostEmployerRequest): PromiseLike<IHostEmployerResponse>;
            HostEmployer_PutHostEmployer(parameters: IHostEmployer_PutHostEmployerRequest): PromiseLike<void>;
            HostEmployer_GetHostEmployers(parameters?: IHostEmployer_GetHostEmployersRequest): PromiseLike<ICollectionResponseHostEmployerResponse>;
            HostEmployer_PostAddHostEmployer(parameters: IHostEmployer_PostAddHostEmployerRequest): PromiseLike<IStudentResponse>;
            Login_PostConfirmPasswordReset(parameters: ILogin_PostConfirmPasswordResetRequest): PromiseLike<void>;
            Login_PostStartPasswordReset(parameters: ILogin_PostStartPasswordResetRequest): PromiseLike<void>;
            Login_PostLogin(parameters: ILogin_PostLoginRequest): PromiseLike<ILoginResponse>;
            Reward_GetStudentReward(parameters: IReward_GetStudentRewardRequest): PromiseLike<ICollectionResponseClaimedRewardsResponse>;
            Reward_PostAssociateStudentToReward(parameters: IReward_PostAssociateStudentToRewardRequest): PromiseLike<void>;
            Reward_PutDisableRewards(parameters: IReward_PutDisableRewardsRequest): PromiseLike<void>;
            Reward_PutEnableRewards(parameters: IReward_PutEnableRewardsRequest): PromiseLike<void>;
            Reward_GetRewards(parameters: IReward_GetRewardsRequest): PromiseLike<IRewardResponse>;
            Reward_SetRewardState(parameters: IReward_SetRewardStateRequest): PromiseLike<any>;
            Reward_PutStudentReward(parameters: IReward_PutStudentRewardRequest): PromiseLike<void>;
            Reward_GetRewards(parameters?: IReward_GetRewardsRequest): PromiseLike<ICollectionResponseRewardResponse>;
            Reward_PostAddStudentReward(parameters: IReward_PostAddStudentRewardRequest): PromiseLike<IRewardResponse>;
            ShareCalendar_GetShareCalendar(parameters: IShareCalendar_GetShareCalendarRequest): PromiseLike<ICollectionResponseCalendarResponse>;
            Students_GetStudentRewards(parameters: IStudents_GetStudentRewardsRequest): PromiseLike<ICollectionResponseClaimedRewardsResponse>;
            Students_GetTrainingProviders(parameters: IStudents_GetTrainingProvidersRequest): PromiseLike<ICollectionResponseTrainingProviderResponse>;
            Students_PostAddExamsToStudents(parameters: IStudents_PostAddExamsToStudentsRequest): PromiseLike<void>;
            Students_PostStudentInformation(parameters: IStudents_PostStudentInformationRequest): PromiseLike<IStudentResponse>;
            Students_GetStudent(parameters: IStudents_GetStudentRequest): PromiseLike<IStudentResponse>;
            Students_PutStudent(parameters: IStudents_PutStudentRequest): PromiseLike<void>;
            Students_GetStudents(parameters?: IStudents_GetStudentsRequest): PromiseLike<ICollectionResponseStudentResponse>;
            Students_PostStudents(parameters: IStudents_PostStudentsRequest): PromiseLike<IStudentResponse>;
            TrainingProviders_DeleteCourseFromTrainingProvider(parameters: ITrainingProviders_DeleteCourseFromTrainingProviderRequest): PromiseLike<void>;
            TrainingProviders_PostAddCourseToTrainingProvider(parameters: ITrainingProviders_PostAddCourseToTrainingProviderRequest): PromiseLike<void>;
            TrainingProviders_PostAssociateStudentToTrainingProvider(parameters: ITrainingProviders_PostAssociateStudentToTrainingProviderRequest): PromiseLike<void>;
            TrainingProviders_PutDisableTrainingProvider(parameters: ITrainingProviders_PutDisableTrainingProviderRequest): PromiseLike<void>;
            TrainingProviders_PutEnableTrainingProvider(parameters: ITrainingProviders_PutEnableTrainingProviderRequest): PromiseLike<void>;
            TrainingProviders_GetTrainingProvider(parameters: ITrainingProviders_GetTrainingProviderRequest): PromiseLike<ITrainingProviderResponse>;
            TrainingProviders_PutTrainingProviders(parameters: ITrainingProviders_PutTrainingProvidersRequest): PromiseLike<void>;
            TrainingProviders_GetTrainingProviders(parameters?: ITrainingProviders_GetTrainingProvidersRequest): PromiseLike<ICollectionResponseTrainingProviderResponse>;
            TrainingProviders_PostTrainingProviders(parameters: ITrainingProviders_PostTrainingProvidersRequest): PromiseLike<ITrainingProviderResponse>;
            TrainingProviders_PutEditCoursesToTrainingProviders(parameters: ITrainingProviders_PutEditCoursesToTrainingProvidersRequest): PromiseLike<void>;
            Users_PostChangePassword(parameters: IUsers_PostChangePasswordRequest): PromiseLike<void>;
            Users_PutDisable(parameters: IUsers_PutDisableRequest): PromiseLike<void>;
            Users_PutEnable(parameters: IUsers_PutEnableRequest): PromiseLike<void>;
        }
    }
}
