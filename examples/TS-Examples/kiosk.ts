//nSwaggerVersion:0.0.6
// This file was automatically generated by nSwagger. Changes made to this file will be lost if nSwagger is run again. See https://github.com/rmaclean/nswagger for more information.
// This file was last generated at: 2016-04-08T12:38:51.6619453Z
namespace nSwagger {
    export module API {
        export interface ISignupRequest {
            Email: string;
            Password: string;
        }

        export interface IAdminResponse {
            Email: string;
            Id: string;
            Role: string;
            State: string;
        }

        export class AdminResponse implements IAdminResponse {
            Email: string;
            Id: string;
            Role: string;
            State: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RoleAsEnum(): AdminResponseRole {
                return AdminResponseRole[this.Role];
            }

            set RoleAsEnum(value:AdminResponseRole) {
                this.Role = AdminResponseRole[value];
            }

            get StateAsEnum(): AdminResponseState {
                return AdminResponseState[this.State];
            }

            set StateAsEnum(value:AdminResponseState) {
                this.State = AdminResponseState[value];
            }
        }

        export enum AdminResponseRole {
            User,
            Admin,
            Kitchen,
            Service
        }

        export enum AdminResponseState {
            Active,
            Disabled,
            WaitingForPinConfirmation
        }

        export interface IUpdateCartItemsRequest {
            CartItems: Array<IAddCartItemRequest>;
        }

        export interface IAddCartItemRequest {
            CartItem: number;
            Item: number;
            Quantity: number;
        }

        export interface ICartResponse {
            CartItems: Array<ICartItemResponse>;
            Id: number;
            OrderNumber: string;
        }

        export interface ICartItemResponse {
            Id: number;
            Item: IItemResponse;
            Price: number;
            Quantity: number;
        }

        export interface IItemResponse {
            Description: string;
            Id: number;
            Image: string;
            Price: number;
            Title: string;
        }

        export interface IMenuCategoryRequest {
            ImageId: string;
            Title: string;
        }

        export interface ICategoryResponse {
            Id: number;
            ImageId: string;
            State: string;
            Title: string;
        }

        export class CategoryResponse implements ICategoryResponse {
            Id: number;
            ImageId: string;
            State: string;
            Title: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): CategoryResponseState {
                return CategoryResponseState[this.State];
            }

            set StateAsEnum(value:CategoryResponseState) {
                this.State = CategoryResponseState[value];
            }
        }

        export enum CategoryResponseState {
            Active,
            Disabled
        }

        export interface IVerifyUserRequest {
            Email: string;
            Pin: string;
        }

        export interface IItemRequest {
            Description: string;
            ImageId: string;
            Price: number;
            Title: string;
        }

        export interface IResetPasswordRequest {
            Password: string;
            Pin: string;
        }

        export interface ILoginRequest {
            Email: string;
            Password: string;
        }

        export interface ILoginResponse {
            Role: string;
            Token: string;
        }

        export class LoginResponse implements ILoginResponse {
            Role: string;
            Token: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RoleAsEnum(): LoginResponseRole {
                return LoginResponseRole[this.Role];
            }

            set RoleAsEnum(value:LoginResponseRole) {
                this.Role = LoginResponseRole[value];
            }
        }

        export enum LoginResponseRole {
            User,
            Admin,
            Kitchen,
            Service
        }

        export interface IOrderResponse {
            Date: string;
            Id: number;
            Items: Array<IOrderItemResponse>;
            OrderId: string;
            State: string;
            TotalPrice: number;
        }

        export class OrderResponse implements IOrderResponse {
            Date: string;
            Id: number;
            Items: Array<IOrderItemResponse>;
            OrderId: string;
            State: string;
            TotalPrice: number;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): OrderResponseState {
                return OrderResponseState[this.State];
            }

            set StateAsEnum(value:OrderResponseState) {
                this.State = OrderResponseState[value];
            }
        }

        export enum OrderResponseState {
            NotSubmitted,
            Pending,
            Cancelled,
            Ready,
            Collected,
            Abandoned
        }

        export interface IOrderItemResponse {
            Id: number;
            item: IItemResponse;
            OrderId: number;
            Price: number;
            Quantity: number;
        }

        export interface IReportingRequest {
            EndDate: string;
            OrderStates: string;
            StartDate: string;
        }

        export class ReportingRequest implements IReportingRequest {
            EndDate: string;
            OrderStates: string;
            StartDate: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get OrderStatesAsEnum(): ReportingRequestOrderStates {
                return ReportingRequestOrderStates[this.OrderStates];
            }

            set OrderStatesAsEnum(value:ReportingRequestOrderStates) {
                this.OrderStates = ReportingRequestOrderStates[value];
            }
        }

        export enum ReportingRequestOrderStates {
            NotSubmitted,
            Pending,
            Cancelled,
            Ready,
            Collected,
            Abandoned
        }

        export interface ITradingHourResponse {
            Closing: string;
            Date: string;
            Id: number;
            Openning: string;
        }

        export interface ITradingHoursRequest {
            Closing: string;
            Date: string;
            Openning: string;
        }

        export interface IUpdateUserRequest {
            Password: string;
        }

        export interface IUpdateUserAdminRequest {
            Id: string;
            Email: string;
            State: string;
            Role: string;
        }

        export class UpdateUserAdminRequest implements IUpdateUserAdminRequest {
            Id: string;
            Email: string;
            State: string;
            Role: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): UpdateUserAdminRequestState {
                return UpdateUserAdminRequestState[this.State];
            }

            set StateAsEnum(value:UpdateUserAdminRequestState) {
                this.State = UpdateUserAdminRequestState[value];
            }

            get RoleAsEnum(): UpdateUserAdminRequestRole {
                return UpdateUserAdminRequestRole[this.Role];
            }

            set RoleAsEnum(value:UpdateUserAdminRequestRole) {
                this.Role = UpdateUserAdminRequestRole[value];
            }
        }

        export enum UpdateUserAdminRequestState {
            Active,
            Disabled,
            WaitingForPinConfirmation
        }

        export enum UpdateUserAdminRequestRole {
            User,
            Admin,
            Kitchen,
            Service
        }

        export interface IAdmin_PostNewAdminRequest {
            request: ISignupRequest;
        }

        export interface IAdmin_PostNewKitchenRequest {
            request: ISignupRequest;
        }

        export interface IAdmin_DeleteAdminRequest {
            id: string;
        }

        export interface ICart_DeleteRequest {
            itemId: number;
        }

        export interface ICart_PostChangeOrderStateRequest {
            orderId: number;
            state: string;
        }

        export interface ICart_PutCartItemsRequest {
            id: number;
            request: IUpdateCartItemsRequest;
        }

        export interface ICart_PostCartItemsRequest {
            request: IAddCartItemRequest;
        }

        export interface ICategory_DeleteMenuCategoryRequest {
            id: number;
        }

        export interface ICategory_EnableMenuCategoryRequest {
            id: number;
        }

        export interface ICategory_PutAdminMenuCategoryRequest {
            id: number;
            request: IMenuCategoryRequest;
        }

        export interface ICategory_PostAdminMenuCategoryRequest {
            request: IMenuCategoryRequest;
        }

        export interface IConfirmUser_PostRequest {
            request: IVerifyUserRequest;
        }

        export interface IItem_GetMenuItemsRequest {
            category: number;
        }

        export interface IItem_PutEnableMenuItemRequest {
            id: number;
        }

        export interface IItem_PutItemRequest {
            id: number;
            request: IItemRequest;
        }

        export interface IItem_DeleteMenuItemRequest {
            id: number;
        }

        export interface IItem_PostMenuItemRequest {
            request: IItemRequest;
        }

        export interface ILogin_PostForgotPasswordRequest {
            email: string;
        }

        export interface ILogin_PostResetPasswordRequest {
            request: IResetPasswordRequest;
        }

        export interface ILogin_PostLoginRequest {
            request: ILoginRequest;
        }

        export interface IOrder_GetOrdersByStateRequest {
            state: string;
        }

        export interface IOrder_GetUserOrderHistoryRequest {
            userId?: string;
        }

        export interface IReporting_PostRequest {
            request: IReportingRequest;
        }

        export interface ISignup_PostResendPinRequest {
            request: ISignupRequest;
        }

        export interface ISignup_PostSignupRequest {
            request: ISignupRequest;
        }

        export interface ITradingHours_PostAddTradingHoursRequest {
            request: ITradingHoursRequest;
        }

        export interface ITradingHours_PutUpdateTradingHoursRequest {
            id: number;
            request: ITradingHoursRequest;
        }

        export interface IUser_PutDisableAdminRequest {
            id: string;
        }

        export interface IUser_PutEnableAdminRequest {
            id: string;
        }

        export interface IUser_PutUserRequest {
            request: IUpdateUserRequest;
        }

        export interface IUser_PutUserAdminRequest {
            request: IUpdateUserAdminRequest;
        }

        export interface IUser_PutUserRoleRequest {
            id: string;
            role: string;
        }

        export interface IUser_GetUserRequest {
            id: string;
        }

        export interface API {
            setToken(value: string, headerOrQueryName: string, isQuery: boolean): void;
            Admin_PostNewAdmin(parameters: IAdmin_PostNewAdminRequest): PromiseLike<void>;
            Admin_PostNewKitchen(parameters: IAdmin_PostNewKitchenRequest): PromiseLike<void>;
            Admin_DeleteAdmin(parameters: IAdmin_DeleteAdminRequest): PromiseLike<any>;
            Admin_GetAdmins(): PromiseLike<Array<IAdminResponse>>;
            Cart_Delete(parameters: ICart_DeleteRequest): PromiseLike<void>;
            Cart_PostChangeOrderState(parameters: ICart_PostChangeOrderStateRequest): PromiseLike<void>;
            Cart_PutCartItems(parameters: ICart_PutCartItemsRequest): PromiseLike<any>;
            Cart_Get(): PromiseLike<ICartResponse>;
            Cart_PostCartItems(parameters: ICart_PostCartItemsRequest): PromiseLike<any>;
            Category_DeleteMenuCategory(parameters: ICategory_DeleteMenuCategoryRequest): PromiseLike<void>;
            Category_EnableMenuCategory(parameters: ICategory_EnableMenuCategoryRequest): PromiseLike<void>;
            Category_PutAdminMenuCategory(parameters: ICategory_PutAdminMenuCategoryRequest): PromiseLike<void>;
            Category_GetCategories(): PromiseLike<Array<ICategoryResponse>>;
            Category_PostAdminMenuCategory(parameters: ICategory_PostAdminMenuCategoryRequest): PromiseLike<void>;
            ConfirmUser_Post(parameters: IConfirmUser_PostRequest): PromiseLike<void>;
            Item_GetMenuItems(parameters: IItem_GetMenuItemsRequest): PromiseLike<Array<IItemResponse>>;
            Item_PutEnableMenuItem(parameters: IItem_PutEnableMenuItemRequest): PromiseLike<void>;
            Item_PutItem(parameters: IItem_PutItemRequest): PromiseLike<any>;
            Item_DeleteMenuItem(parameters: IItem_DeleteMenuItemRequest): PromiseLike<void>;
            Item_PostMenuItem(parameters: IItem_PostMenuItemRequest): PromiseLike<void>;
            Login_PostForgotPassword(parameters: ILogin_PostForgotPasswordRequest): PromiseLike<void>;
            Login_PostResetPassword(parameters: ILogin_PostResetPasswordRequest): PromiseLike<void>;
            Login_PostLogin(parameters: ILogin_PostLoginRequest): PromiseLike<ILoginResponse>;
            Logout_PostLogout(): PromiseLike<void>;
            Order_GetOrdersByState(parameters: IOrder_GetOrdersByStateRequest): PromiseLike<Array<IOrderResponse>>;
            Order_GetTodayOrders(): PromiseLike<Array<IOrderResponse>>;
            Order_GetUserOrderHistory(parameters?: IOrder_GetUserOrderHistoryRequest): PromiseLike<Array<IOrderItemResponse>>;
            Reporting_Post(parameters: IReporting_PostRequest): PromiseLike<any>;
            Signup_PostResendPin(parameters: ISignup_PostResendPinRequest): PromiseLike<any>;
            Signup_PostSignup(parameters: ISignup_PostSignupRequest): PromiseLike<void>;
            TradingHours_GetTradingHours(): PromiseLike<Array<ITradingHourResponse>>;
            TradingHours_PostAddTradingHours(parameters: ITradingHours_PostAddTradingHoursRequest): PromiseLike<ITradingHourResponse>;
            TradingHours_PutUpdateTradingHours(parameters: ITradingHours_PutUpdateTradingHoursRequest): PromiseLike<ITradingHourResponse>;
            User_PutDisableAdmin(parameters: IUser_PutDisableAdminRequest): PromiseLike<any>;
            User_PutEnableAdmin(parameters: IUser_PutEnableAdminRequest): PromiseLike<any>;
            User_PutUser(parameters: IUser_PutUserRequest): PromiseLike<any>;
            User_PutUserAdmin(parameters: IUser_PutUserAdminRequest): PromiseLike<any>;
            User_PutUserRole(parameters: IUser_PutUserRoleRequest): PromiseLike<any>;
            User_GetAllUsers(): PromiseLike<Array<IAdminResponse>>;
            User_GetUser(parameters: IUser_GetUserRequest): PromiseLike<IAdminResponse>;
        }
    }
}
