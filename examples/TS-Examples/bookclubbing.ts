// This file was autogenerated by nSwagger 0.0.1 - changes made to it maybe lost if nSwagger is run again
namespace nSwagger {
    export module BookClubbingAPI {
        export class ResendPinRequest {
            Email: string;
        }

        export class AuthRequest {
            Email: string;
            Password: string;
        }

        export class ImageParameters {
            Height: number;
            Width: number;
        }

        export class BookItem {
            AffiliateLink: string;
            Author: string;
            CheckedOut: string;
            CheckedOutToId: string;
            CheckedOutToName: string;
            Description: string;
            Genres: GenreResponseItem[];
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            InOwnCollection: boolean;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            ResourceAddedMethod: string;
            ResourceCondition: string;
            ResourceId: string;
            ResourceTag: string;
            SubTitle: string;
            Title: string;
        }

        export enum BookItemResourceAddedMethod {
            Scanned,
            AddedManually
        }

        export enum BookItemResourceCondition {
            New,
            Used,
            Damaged
        }

        export class GenreResponseItem {
            Aliases: any;
            Id: number;
            Name: string;
        }

        export class FilterParameters {
            Skip: number;
            Top: number;
        }

        export class CumulitiveRatingResponse {
            NotEnoughRatings: boolean;
            Ratings: RatingResponse[];
            Score: number;
        }

        export class RatingResponse {
            Book: BookItem;
            Note: string;
            Rating: number;
            Type: string;
        }

        export enum RatingResponseType {
            Book
        }

        export class Top10ResponseItem {
            Book: BookItem;
            Rating: number;
        }

        export class AddBookToRequest {
            AddToClub: boolean;
            BookId: string;
            ClubID: string;
            Condition: string;
            Latitude: number;
            Longitude: number;
            Tag: string;
        }

        export enum AddBookToRequestCondition {
            New,
            Used,
            Damaged
        }

        export class BookSearchRequest {
            Latitude: number;
            Longitude: number;
            Query: string;
        }

        export class BookCreateRequest {
            Author: string;
            Description: string;
            Genres: number[];
            GoodReadsId: string;
            GutenburgId: string;
            ImageUrl: string;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            SubTitle: string;
            Title: string;
        }

        export class ReadResponseItem {
            Book: BookItem;
            When: string;
        }

        export class CollectionResponseReadResponseItem {
            Items: ReadResponseItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class Position {
            Latitude: number;
            Longitude: number;
        }

        export class CollectionResponseClubGetMemberResponse {
            Items: ClubGetMemberResponse[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ClubGetMemberResponse {
            Member: UserResponse;
            RelationshipType: string;
            Self: boolean;
        }

        export enum ClubGetMemberResponseRelationshipType {
            Admin,
            Member,
            Follower
        }

        export class UserResponse {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Id: string;
            JoinedOn: string;
            LastName: string;
            MonthOfBirth: number;
            PhotoURL: string;
            ShareClubs: boolean;
            ShareEmail: boolean;
            ShareMyBooks: boolean;
            ShareRatings: boolean;
            ShareReads: boolean;
            ShareReservations: boolean;
            ShareWishlist: boolean;
            Twitter: string;
            UseGravatar: boolean;
            Website: string;
            YearOfBirth: number;
        }

        export class ChangeRoleRequest {
            Admin: boolean;
            UserId: string;
        }

        export class ClubSearchRequest {
            Query: string;
        }

        export class CollectionResponseClubResponseItem {
            Items: ClubResponseItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ClubResponseItem {
            Id: string;
            ClubName: string;
        }

        export class ClubGetResponse {
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export enum ClubGetResponseAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubGetResponseClubType {
            BookClub
        }

        export enum ClubGetResponseCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubGetResponsePrivacyLevel {
            Public,
            Hidden
        }

        export enum ClubGetResponseStyle {
            SingleRead,
            MultiRead
        }

        export class ClubUpdateRequest {
            SeeFollowers: boolean;
            SeeMembers: boolean;
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export enum ClubUpdateRequestAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubUpdateRequestClubStyle {
            SingleRead,
            MultiRead
        }

        export enum ClubUpdateRequestCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubUpdateRequestPrivacyLevel {
            Public,
            Hidden
        }

        export class ClubCreateRequest {
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export enum ClubCreateRequestAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubCreateRequestClubStyle {
            SingleRead,
            MultiRead
        }

        export enum ClubCreateRequestCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubCreateRequestPrivacyLevel {
            Public,
            Hidden
        }

        export class CollectionResponseClubInviteItem {
            Items: ClubInviteItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ClubInviteItem {
            ClubId: string;
            ClubName: string;
            InviteId: string;
            Message: string;
            RecipientFullName: string;
            RecipientId: string;
            Seen: boolean;
            SenderFullName: string;
            SenderId: string;
        }

        export class AddClubInviteRequest {
            Message: string;
            UserId: string;
        }

        export class ClubJoinRequest {
            Club: string;
            Invite: string;
            JustFollow: boolean;
        }

        export class CollectionResponseBookItem {
            Items: BookItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class EventItem {
            City: string;
            ClubId: string;
            ClubName: string;
            Country: string;
            Description: string;
            EndDate: string;
            EventId: string;
            Latitude: number;
            Longitude: number;
            OwnerId: string;
            OwnerName: string;
            Province: string;
            StartDate: string;
            Street1: string;
            Street2: string;
            Street3: string;
            Suburb: string;
            Title: string;
        }

        export class EventCreateRequest {
            City: string;
            Country: string;
            Description: string;
            EndDate: string;
            Province: string;
            StartDate: string;
            Street1: string;
            Street2: string;
            Street3: string;
            Suburb: string;
            Title: string;
        }

        export class CollectionResponseEventItem {
            Items: EventItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ForgotPasswordRequest {
            Email: string;
        }

        export class CreateGenreAlias {
            Title: string;
        }

        export class GenreCreateRequest {
            Name: string;
        }

        export class SystemStatus {
            SystemUp: boolean;
            Version: string;
        }

        export class OAuthRequest {
            Source: string;
            Token: string;
        }

        export enum OAuthRequestSource {
            Facebook,
            PIntrest
        }

        export class AddRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;
        }

        export enum AddRatingRequestThingType {
            Book
        }

        export class UpdateRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;
        }

        export enum UpdateRatingRequestThingType {
            Book
        }

        export class RegistrationConfirmRequest {
            Email: string;
            PIN: string;
        }

        export class CollectionResponseReservationResponseItem {
            Items: ReservationResponseItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ReservationResponseItem {
            Id: string;
            ReservedOn: string;
            Book: Book;
            ThingType: string;
            UserHidden: boolean;
            UserId: string;
            UserName: string;
        }

        export enum ReservationResponseItemThingType {
            Book
        }

        export class Book {
            Author: string;
            Description: string;
            Genres: Genre[];
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            ImageId: string;
            ImageBasePath: string;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            State: string;
            SubTitle: string;
            Title: string;
        }

        export enum BookState {
            Active
        }

        export class Genre {
            Id: number;
            Name: string;
            State: string;
        }

        export enum GenreState {
            Active
        }

        export class ReserveRequest {
            ResourceId: string;
        }

        export class PasswordResetRequest {
            Token: string;
            Password: string;
            PasswordConfirm: string;
        }

        export class ResourceItem {
            Book: BookItem;
            Type: string;
        }

        export enum ResourceItemType {
            Book
        }

        export class ResourceCollection {
            Books: CollectionResponseBookItem;
        }

        export class CollectionResponseRSVPItem {
            Items: RSVPItem[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class RSVPItem {
            ClubId: string;
            EndDate: string;
            EventId: string;
            Title: string;
            Id: string;
            RSVP: string;
            RSVPOn: string;
            StartDate: string;
            UserId: string;
            UsersName: string;
        }

        export enum RSVPItemRSVP {
            Going,
            NotGoing,
            Maybe
        }

        export class RSVPRequest {
            EventId: string;
            RSVP: string;
        }

        export enum RSVPRequestRSVP {
            Going,
            NotGoing,
            Maybe
        }

        export class SystemSettingItem {
            EmailFrom: string;
            LootAffiliateCode: string;
            MaxClubsPerUser: number;
        }

        export class EmailItem {
            HTML: string;
            PlainText: string;
            Subject: string;
            Type: string;
        }

        export enum EmailItemType {
            Registration,
            ForgotPassword,
            ClubInvite,
            EventInvite,
            EventUpdate
        }

        export class TrendingFilterParameters {
            AgeFilter: boolean;
            DateFilter: boolean;
            EndAgeRange: number;
            EndDateRange: string;
            Limit: number;
            StartAgeRange: number;
            StartDateRange: string;
        }

        export class CollectionResponseClubGetUserResponse {
            Items: ClubGetUserResponse[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class ClubGetUserResponse {
            RelationshipType: string;
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export enum ClubGetUserResponseRelationshipType {
            Admin,
            Member,
            Follower
        }

        export enum ClubGetUserResponseAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubGetUserResponseClubType {
            BookClub
        }

        export enum ClubGetUserResponseCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubGetUserResponsePrivacyLevel {
            Public,
            Hidden
        }

        export enum ClubGetUserResponseStyle {
            SingleRead,
            MultiRead
        }

        export class CollectionResponseRatingResponse {
            Items: RatingResponse[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class CollectionResponseWishlistResponse {
            Items: WishlistResponse[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class WishlistResponse {
            Book: BookItem;
            Type: string;
        }

        export enum WishlistResponseType {
            Book
        }

        export class UserFindRequest {
            Query: string;
        }

        export class CollectionResponseUserSearchResponse {
            Items: UserSearchResponse[];
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export class UserSearchResponse {
            DisplayName: string;
            PhotoUrl: string;
            UserId: string;
        }

        export class PhotoUpload {
            Base64Data: string;
        }

        export class RegistrationRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            Latitude: number;
            Longitude: number;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            YearOfBirth: number;
        }

        export enum RegistrationRequestGender {
            Male,
            Female,
            Unspecified
        }

        export class UserUpdateRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            ShareClubs: boolean;
            ShareEmail: boolean;
            ShareLocation: boolean;
            ShareMyBooks: boolean;
            ShareRatings: boolean;
            ShareReads: boolean;
            ShareReservations: boolean;
            ShareWishlist: boolean;
            Twitter: string;
            UseGravatar: boolean;
            Website: string;
            YearOfBirth: number;
        }

        export enum UserUpdateRequestGender {
            Male,
            Female,
            Unspecified
        }

        export class WishlistAdd {
            ResourceType: string;
            ThingId: string;
        }

        export enum WishlistAddResourceType {
            Book
        }

        export interface Auth_PostResendRegistrationPinRequest {
            request: ResendPinRequest;
        }

        export interface Auth_PostRequest {
            request: AuthRequest;
        }

        export interface Book_GetBookAdminRequest {
            id: string;
            height?: number;
            width?: number;
        }

        export interface Book_GetRatingsRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface Book_GetTop10Request {
            height?: number;
            width?: number;
        }

        export interface Book_PostRequest {
            request: AddBookToRequest;
            height?: number;
            width?: number;
        }

        export interface Book_GetRequest {
            latitude?: number;
            longitude?: number;
            query?: string;
            height?: number;
            width?: number;
        }

        export interface Book_PostAdminRequest {
            request: BookCreateRequest;
        }

        export interface Book_PutBookUpdateAdminRequest {
            id: string;
            request: BookCreateRequest;
        }

        export interface BookRead_DeleteReadRequest {
            id: string;
        }

        export interface BookRead_GetSingleReadRequest {
            id: string;
            height?: number;
            width?: number;
        }

        export interface BookRead_GetRequest {
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface BookRead_PostReadRequest {
            id: string;
            location: Position;
        }

        export interface Club_GetMembersRequest {
            id: string;
            memberType?: string;
            excludeSelf?: boolean;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface Club_GetTop10Request {
            id: string;
            height?: number;
            width?: number;
        }

        export interface Club_PostChangeUsersRoleRequest {
            id: string;
            changeRoleRequest: ChangeRoleRequest;
        }

        export interface Club_PostRemoveUserFromClubRequest {
            id: string;
            userId: string;
        }

        export interface Club_PostSearchRequest {
            request: ClubSearchRequest;
            skip?: number;
            top?: number;
        }

        export interface Club_DeleteRequest {
            id: string;
        }

        export interface Club_GetRequest {
            id: string;
        }

        export interface Club_PutRequest {
            id: string;
            request: ClubUpdateRequest;
        }

        export interface Club_PostRequest {
            request: ClubCreateRequest;
        }

        export interface ClubInvite_DeleteRequest {
            id: string;
            inviteid: string;
        }

        export interface ClubInvite_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface ClubInvite_PostRequest {
            id: string;
            request: AddClubInviteRequest;
        }

        export interface ClubJoin_DeleteRequest {
            id: string;
        }

        export interface ClubJoin_PostRequest {
            request: ClubJoinRequest;
        }

        export interface ClubMember_GetMembersBooksRequest {
            clubId: string;
            memberId: string;
            filter?: string;
            height?: number;
            width?: number;
            skip?: number;
            top?: number;
        }

        export interface Event_DeleteRequest {
            id: string;
            eventid: string;
        }

        export interface Event_GetSingleEventRequest {
            id: string;
            eventid: string;
        }

        export interface Event_PutRequest {
            id: string;
            eventid: string;
            request: EventCreateRequest;
        }

        export interface Event_GetEventsRequest {
            id: string;
            eventStartRangeBegin?: string;
            eventStartRangeEnd?: string;
            skip?: number;
            top?: number;
        }

        export interface Event_PostRequest {
            id: string;
            request: EventCreateRequest;
        }

        export interface Event_PostAddInviteRequest {
            id: string;
            eventid: string;
            userId: string;
        }

        export interface ForgotPassword_PostRequest {
            request: ForgotPasswordRequest;
        }

        export interface Genres_DeleteAliasRequest {
            id: number;
            aliasId: number;
        }

        export interface Genres_DeleteGenreToBookRequest {
            bookId: string;
            id: number;
        }

        export interface Genres_PostAddGenreToBookRequest {
            bookId: string;
            id: number;
        }

        export interface Genres_PostAliasRequest {
            id: number;
            request: CreateGenreAlias;
        }

        export interface Genres_DeleteRequest {
            id: number;
        }

        export interface Genres_PutRequest {
            id: number;
            request: GenreCreateRequest;
        }

        export interface Genres_GetRequest {
            skip?: number;
            top?: number;
        }

        export interface Genres_PostRequest {
            request: GenreCreateRequest;
        }

        export interface OAuth_PostRequest {
            request: OAuthRequest;
        }

        export interface Rating_DeleteRequest {
            id: number;
        }

        export interface Rating_PostRequest {
            request: AddRatingRequest;
        }

        export interface Rating_PutRequest {
            request: UpdateRatingRequest;
        }

        export interface RegistrationConfirm_PostRequest {
            request: RegistrationConfirmRequest;
        }

        export interface Reserve_DeleteRequest {
            id: string;
        }

        export interface Reserve_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface Reserve_PostRequest {
            request: ReserveRequest;
        }

        export interface ReservedName_DeleteRequest {
            id: number;
        }

        export interface ReservedName_GetRequest {
            id: number;
        }

        export interface ReservedName_PutRequest {
            id: number;
            title: string;
        }

        export interface ReservedName_PostRequest {
            title: string;
        }

        export interface ResetPassword_PostRequest {
            request: PasswordResetRequest;
        }

        export interface Resource_PostCheckinResourceRequest {
            id: string;
            resourceId: string;
        }

        export interface Resource_DeleteRequest {
            id: string;
            resourceId: string;
        }

        export interface Resource_GetResourceRequest {
            id: string;
            resourceId: string;
            height?: number;
            width?: number;
        }

        export interface Resource_PostAddResourceToClubRequest {
            id: string;
            resourceId: string;
        }

        export interface Resource_DeleteFromUserRequest {
            resourceId: string;
        }

        export interface Resource_GetRequest {
            id: string;
            resourceType?: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface Resource_GetUserResourceRequest {
            resourceId: string;
            height?: number;
            width?: number;
        }

        export interface Resource_PostCheckoutResourceRequest {
            id: string;
            resourceId: string;
        }

        export interface RSVP_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface RSVP_PostRequest {
            request: RSVPRequest;
        }

        export interface System_DeleteQuoteRequest {
            id: number;
        }

        export interface System_PostQuoteRequest {
            content: string;
        }

        export interface System_PostRequest {
            request: SystemSettingItem;
        }

        export interface System_GetSystemEmailRequest {
            type: string;
        }

        export interface System_PutSystemEmailRequest {
            request: EmailItem;
        }

        export interface Trending_GetClubTrendingRequest {
            id: string;
            ageFilter?: boolean;
            dateFilter?: boolean;
            endAgeRange?: number;
            endDateRange?: string;
            limit?: number;
            startAgeRange?: number;
            startDateRange?: string;
            height?: number;
            width?: number;
        }

        export interface Trending_GetTrendingRequest {
            ageFilter?: boolean;
            dateFilter?: boolean;
            endAgeRange?: number;
            endDateRange?: string;
            limit?: number;
            startAgeRange?: number;
            startDateRange?: string;
            height?: number;
            width?: number;
        }

        export interface User_DeleteClubInviteRequest {
            inviteid: string;
        }

        export interface User_PutEventInviteRequest {
            inviteid: string;
        }

        export interface User_DeleteEventInviteRequest {
            eventId: string;
        }

        export interface User_GetBooksRequest {
            skip?: number;
            top?: number;
        }

        export interface User_GetClubsRequest {
            skip?: number;
            top?: number;
        }

        export interface User_GetClubsForSpecifiedUserRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface User_GetEventsRequest {
            eventStartRangeBegin?: string;
            eventStartRangeEnd?: string;
            skip?: number;
            top?: number;
        }

        export interface User_GetInvitesRequest {
            skip?: number;
            top?: number;
        }

        export interface User_GetMyEventInviteRequest {
            skip?: number;
            top?: number;
        }

        export interface User_GetMyReservationsRequest {
            skip?: number;
            top?: number;
        }

        export interface User_GetRatingsRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface User_GetReadBooksRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface User_GetSpecificUsersBooksRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface User_GetSpecificUsersReservationsRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface User_GetSpecifiedUserRequest {
            userId: string;
            height?: number;
            width?: number;
        }

        export interface User_GetSpecifiedWishlistRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface User_GetWishlistRequest {
            skip?: number;
            top?: number;
        }

        export interface User_PostFindUserRequest {
            request: UserFindRequest;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface User_PostPhotoRequest {
            photo: PhotoUpload;
        }

        export interface User_GetRequest {
            height?: number;
            width?: number;
        }

        export interface User_PostRequest {
            request: RegistrationRequest;
        }

        export interface User_PutRequest {
            request: UserUpdateRequest;
        }

        export interface Wishlist_DeleteRequest {
            id: string;
        }

        export interface Wishlist_PostRequest {
            request: WishlistAdd;
        }

        export interface API {
            setToken(value: string, headerOrQueryName: string, isQuery: boolean): void;
            Auth_PostResendRegistrationPin(parameters: Auth_PostResendRegistrationPinRequest): PromiseLike<void>;
            Auth_Post(parameters: Auth_PostRequest): PromiseLike<string>;
            Book_GetBookAdmin(parameters: Book_GetBookAdminRequest): PromiseLike<BookItem>;
            Book_GetRatings(parameters: Book_GetRatingsRequest): PromiseLike<CumulitiveRatingResponse>;
            Book_GetTop10(parameters?: Book_GetTop10Request): PromiseLike<Top10ResponseItem>;
            Book_Post(parameters: Book_PostRequest): PromiseLike<BookItem>;
            Book_Get(parameters?: Book_GetRequest): PromiseLike<BookItem>;
            Book_PostAdmin(parameters: Book_PostAdminRequest): PromiseLike<string>;
            Book_PutBookUpdateAdmin(parameters: Book_PutBookUpdateAdminRequest): PromiseLike<string>;
            BookRead_DeleteRead(parameters: BookRead_DeleteReadRequest): PromiseLike<void>;
            BookRead_GetSingleRead(parameters: BookRead_GetSingleReadRequest): PromiseLike<ReadResponseItem>;
            BookRead_Get(parameters?: BookRead_GetRequest): PromiseLike<CollectionResponseReadResponseItem>;
            BookRead_PostRead(parameters: BookRead_PostReadRequest): PromiseLike<void>;
            Club_GetMembers(parameters: Club_GetMembersRequest): PromiseLike<CollectionResponseClubGetMemberResponse>;
            Club_GetTop10(parameters: Club_GetTop10Request): PromiseLike<Top10ResponseItem>;
            Club_PostChangeUsersRole(parameters: Club_PostChangeUsersRoleRequest): PromiseLike<void>;
            Club_PostRemoveUserFromClub(parameters: Club_PostRemoveUserFromClubRequest): PromiseLike<void>;
            Club_PostSearch(parameters: Club_PostSearchRequest): PromiseLike<CollectionResponseClubResponseItem>;
            Club_Delete(parameters: Club_DeleteRequest): PromiseLike<void>;
            Club_Get(parameters: Club_GetRequest): PromiseLike<ClubGetResponse>;
            Club_Put(parameters: Club_PutRequest): PromiseLike<void>;
            Club_Post(parameters: Club_PostRequest): PromiseLike<string>;
            ClubInvite_Delete(parameters: ClubInvite_DeleteRequest): PromiseLike<void>;
            ClubInvite_Get(parameters: ClubInvite_GetRequest): PromiseLike<CollectionResponseClubInviteItem>;
            ClubInvite_Post(parameters: ClubInvite_PostRequest): PromiseLike<void>;
            ClubJoin_Delete(parameters: ClubJoin_DeleteRequest): PromiseLike<void>;
            ClubJoin_Post(parameters: ClubJoin_PostRequest): PromiseLike<void>;
            ClubMember_GetMembersBooks(parameters: ClubMember_GetMembersBooksRequest): PromiseLike<CollectionResponseBookItem>;
            Event_Delete(parameters: Event_DeleteRequest): PromiseLike<void>;
            Event_GetSingleEvent(parameters: Event_GetSingleEventRequest): PromiseLike<EventItem>;
            Event_Put(parameters: Event_PutRequest): PromiseLike<void>;
            Event_GetEvents(parameters: Event_GetEventsRequest): PromiseLike<CollectionResponseEventItem>;
            Event_Post(parameters: Event_PostRequest): PromiseLike<void>;
            Event_PostAddInvite(parameters: Event_PostAddInviteRequest): PromiseLike<void>;
            ForgotPassword_Post(parameters: ForgotPassword_PostRequest): PromiseLike<void>;
            Genres_DeleteAlias(parameters: Genres_DeleteAliasRequest): PromiseLike<void>;
            Genres_DeleteGenreToBook(parameters: Genres_DeleteGenreToBookRequest): PromiseLike<number>;
            Genres_PostAddGenreToBook(parameters: Genres_PostAddGenreToBookRequest): PromiseLike<number>;
            Genres_PostAlias(parameters: Genres_PostAliasRequest): PromiseLike<number>;
            Genres_Delete(parameters: Genres_DeleteRequest): PromiseLike<void>;
            Genres_Put(parameters: Genres_PutRequest): PromiseLike<void>;
            Genres_Get(parameters?: Genres_GetRequest): PromiseLike<GenreResponseItem>;
            Genres_Post(parameters: Genres_PostRequest): PromiseLike<number>;
            Health_Get(): PromiseLike<SystemStatus>;
            Logout_Post(): PromiseLike<void>;
            OAuth_Post(parameters: OAuth_PostRequest): PromiseLike<void>;
            Quote_Get(): PromiseLike<string>;
            Rating_Delete(parameters: Rating_DeleteRequest): PromiseLike<void>;
            Rating_Post(parameters: Rating_PostRequest): PromiseLike<void>;
            Rating_Put(parameters: Rating_PutRequest): PromiseLike<void>;
            RegistrationConfirm_Post(parameters: RegistrationConfirm_PostRequest): PromiseLike<void>;
            Reserve_Delete(parameters: Reserve_DeleteRequest): PromiseLike<void>;
            Reserve_Get(parameters: Reserve_GetRequest): PromiseLike<CollectionResponseReservationResponseItem>;
            Reserve_Post(parameters: Reserve_PostRequest): PromiseLike<void>;
            ReservedName_Delete(parameters: ReservedName_DeleteRequest): PromiseLike<void>;
            ReservedName_Get(parameters: ReservedName_GetRequest): PromiseLike<string>;
            ReservedName_Put(parameters: ReservedName_PutRequest): PromiseLike<void>;
            ReservedName_Get(): PromiseLike<any>;
            ReservedName_Post(parameters: ReservedName_PostRequest): PromiseLike<void>;
            ResetPassword_Post(parameters: ResetPassword_PostRequest): PromiseLike<void>;
            Resource_PostCheckinResource(parameters: Resource_PostCheckinResourceRequest): PromiseLike<void>;
            Resource_Delete(parameters: Resource_DeleteRequest): PromiseLike<void>;
            Resource_GetResource(parameters: Resource_GetResourceRequest): PromiseLike<ResourceItem>;
            Resource_PostAddResourceToClub(parameters: Resource_PostAddResourceToClubRequest): PromiseLike<void>;
            Resource_DeleteFromUser(parameters: Resource_DeleteFromUserRequest): PromiseLike<void>;
            Resource_Get(parameters: Resource_GetRequest): PromiseLike<ResourceCollection>;
            Resource_GetUserResource(parameters: Resource_GetUserResourceRequest): PromiseLike<ResourceItem>;
            Resource_PostCheckoutResource(parameters: Resource_PostCheckoutResourceRequest): PromiseLike<void>;
            RSVP_Get(parameters: RSVP_GetRequest): PromiseLike<CollectionResponseRSVPItem>;
            RSVP_Post(parameters: RSVP_PostRequest): PromiseLike<void>;
            System_DeleteQuote(parameters: System_DeleteQuoteRequest): PromiseLike<any>;
            System_GetQuotes(): PromiseLike<any>;
            System_PostQuote(parameters: System_PostQuoteRequest): PromiseLike<any>;
            System_Get(): PromiseLike<SystemSettingItem>;
            System_Post(parameters: System_PostRequest): PromiseLike<void>;
            System_GetSystemEmail(parameters: System_GetSystemEmailRequest): PromiseLike<any>;
            System_GetSystemEmails(): PromiseLike<any>;
            System_PutSystemEmail(parameters: System_PutSystemEmailRequest): PromiseLike<any>;
            Trending_GetClubTrending(parameters: Trending_GetClubTrendingRequest): PromiseLike<BookItem>;
            Trending_GetTrending(parameters?: Trending_GetTrendingRequest): PromiseLike<BookItem>;
            User_DeleteClubInvite(parameters: User_DeleteClubInviteRequest): PromiseLike<void>;
            User_PutEventInvite(parameters: User_PutEventInviteRequest): PromiseLike<void>;
            User_DeleteEventInvite(parameters: User_DeleteEventInviteRequest): PromiseLike<void>;
            User_GetBooks(parameters?: User_GetBooksRequest): PromiseLike<CollectionResponseBookItem>;
            User_GetClubs(parameters?: User_GetClubsRequest): PromiseLike<CollectionResponseClubGetUserResponse>;
            User_GetClubsForSpecifiedUser(parameters: User_GetClubsForSpecifiedUserRequest): PromiseLike<CollectionResponseClubGetUserResponse>;
            User_GetEvents(parameters?: User_GetEventsRequest): PromiseLike<CollectionResponseRSVPItem>;
            User_GetInvites(parameters?: User_GetInvitesRequest): PromiseLike<CollectionResponseClubInviteItem>;
            User_GetMyEventInvite(parameters?: User_GetMyEventInviteRequest): PromiseLike<CollectionResponseEventItem>;
            User_GetMyReservations(parameters?: User_GetMyReservationsRequest): PromiseLike<ReservationResponseItem>;
            User_GetRatings(parameters: User_GetRatingsRequest): PromiseLike<CollectionResponseRatingResponse>;
            User_GetRatings(parameters?: User_GetRatingsRequest): PromiseLike<CollectionResponseRatingResponse>;
            User_GetReadBooks(parameters: User_GetReadBooksRequest): PromiseLike<CollectionResponseReadResponseItem>;
            User_GetSpecificUsersBooks(parameters: User_GetSpecificUsersBooksRequest): PromiseLike<CollectionResponseBookItem>;
            User_GetSpecificUsersReservations(parameters: User_GetSpecificUsersReservationsRequest): PromiseLike<CollectionResponseReservationResponseItem>;
            User_GetSpecifiedUser(parameters: User_GetSpecifiedUserRequest): PromiseLike<UserResponse>;
            User_GetSpecifiedWishlist(parameters: User_GetSpecifiedWishlistRequest): PromiseLike<CollectionResponseWishlistResponse>;
            User_GetWishlist(parameters?: User_GetWishlistRequest): PromiseLike<CollectionResponseWishlistResponse>;
            User_PostFindUser(parameters: User_PostFindUserRequest): PromiseLike<CollectionResponseUserSearchResponse>;
            User_PostPhoto(parameters: User_PostPhotoRequest): PromiseLike<void>;
            User_Get(parameters?: User_GetRequest): PromiseLike<UserResponse>;
            User_Post(parameters: User_PostRequest): PromiseLike<void>;
            User_Put(parameters: User_PutRequest): PromiseLike<void>;
            Wishlist_Delete(parameters: Wishlist_DeleteRequest): PromiseLike<void>;
            Wishlist_Post(parameters: Wishlist_PostRequest): PromiseLike<string>;
        }
    }
}
