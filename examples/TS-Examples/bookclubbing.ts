//nSwaggerVersion:0.0.5
// This file was automatically generated by nSwagger. Changes made to this file will be lost if nSwagger is run again. See https://github.com/rmaclean/nswagger for more information.
// This file was last generated at: 2016-03-30T11:19:12.6047455Z
namespace nSwagger {
    export module BookClubbingAPI {
        export interface IResendPinRequest {
            Email: string;
        }

        export interface IAuthRequest {
            Email: string;
            Password: string;
        }

        export interface IImageParameters {
            Height: number;
            Width: number;
        }

        export interface IBookItem {
            AffiliateLink: string;
            Author: string;
            CheckedOut: string;
            CheckedOutToId: string;
            CheckedOutToName: string;
            Description: string;
            Genres: Array<IGenreResponseItem>;
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            InOwnCollection: boolean;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            ResourceAddedMethod: string;
            ResourceCondition: string;
            ResourceId: string;
            ResourceTag: string;
            SubTitle: string;
            Title: string;
        }

        export class BookItem implements IBookItem {
            AffiliateLink: string;
            Author: string;
            CheckedOut: string;
            CheckedOutToId: string;
            CheckedOutToName: string;
            Description: string;
            Genres: Array<IGenreResponseItem>;
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            InOwnCollection: boolean;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            ResourceAddedMethod: string;
            ResourceCondition: string;
            ResourceId: string;
            ResourceTag: string;
            SubTitle: string;
            Title: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ResourceAddedMethodAsEnum(): BookItemResourceAddedMethod {
                return BookItemResourceAddedMethod[this.ResourceAddedMethod];
            }

            set ResourceAddedMethodAsEnum(value:BookItemResourceAddedMethod) {
                this.ResourceAddedMethod = BookItemResourceAddedMethod[value];
            }

            get ResourceConditionAsEnum(): BookItemResourceCondition {
                return BookItemResourceCondition[this.ResourceCondition];
            }

            set ResourceConditionAsEnum(value:BookItemResourceCondition) {
                this.ResourceCondition = BookItemResourceCondition[value];
            }
        }

        export enum BookItemResourceAddedMethod {
            Scanned,
            AddedManually
        }

        export enum BookItemResourceCondition {
            New,
            Used,
            Damaged
        }

        export interface IGenreResponseItem {
            Aliases: any;
            Id: number;
            Name: string;
        }

        export interface IFilterParameters {
            Skip: number;
            Top: number;
        }

        export interface ICumulitiveRatingResponse {
            NotEnoughRatings: boolean;
            Ratings: Array<IRatingResponse>;
            Score: number;
        }

        export interface IRatingResponse {
            Book: IBookItem;
            Note: string;
            Rating: number;
            Type: string;
        }

        export class RatingResponse implements IRatingResponse {
            Book: IBookItem;
            Note: string;
            Rating: number;
            Type: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get TypeAsEnum(): RatingResponseType {
                return RatingResponseType[this.Type];
            }

            set TypeAsEnum(value:RatingResponseType) {
                this.Type = RatingResponseType[value];
            }
        }

        export enum RatingResponseType {
            Book
        }

        export interface ITop10ResponseItem {
            Book: IBookItem;
            Rating: number;
        }

        export interface IAddBookToRequest {
            AddToClub: boolean;
            BookId: string;
            ClubID: string;
            Condition: string;
            Latitude: number;
            Longitude: number;
            Tag: string;
        }

        export class AddBookToRequest implements IAddBookToRequest {
            AddToClub: boolean;
            BookId: string;
            ClubID: string;
            Condition: string;
            Latitude: number;
            Longitude: number;
            Tag: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ConditionAsEnum(): AddBookToRequestCondition {
                return AddBookToRequestCondition[this.Condition];
            }

            set ConditionAsEnum(value:AddBookToRequestCondition) {
                this.Condition = AddBookToRequestCondition[value];
            }
        }

        export enum AddBookToRequestCondition {
            New,
            Used,
            Damaged
        }

        export interface IBookSearchRequest {
            Latitude: number;
            Longitude: number;
            Query: string;
        }

        export interface IBookCreateRequest {
            Author: string;
            Description: string;
            Genres: Array<number>;
            GoodReadsId: string;
            GutenburgId: string;
            ImageUrl: string;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            SubTitle: string;
            Title: string;
        }

        export interface IReadResponseItem {
            Book: IBookItem;
            When: string;
        }

        export interface ICollectionResponseReadResponseItem {
            Items: Array<IReadResponseItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IPosition {
            Latitude: number;
            Longitude: number;
        }

        export interface ICollectionResponseClubGetMemberResponse {
            Items: Array<IClubGetMemberResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IClubGetMemberResponse {
            Member: IUserResponse;
            RelationshipType: string;
            Self: boolean;
        }

        export class ClubGetMemberResponse implements IClubGetMemberResponse {
            Member: IUserResponse;
            RelationshipType: string;
            Self: boolean;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RelationshipTypeAsEnum(): ClubGetMemberResponseRelationshipType {
                return ClubGetMemberResponseRelationshipType[this.RelationshipType];
            }

            set RelationshipTypeAsEnum(value:ClubGetMemberResponseRelationshipType) {
                this.RelationshipType = ClubGetMemberResponseRelationshipType[value];
            }
        }

        export enum ClubGetMemberResponseRelationshipType {
            Admin,
            Member,
            Follower
        }

        export interface IUserResponse {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Id: string;
            JoinedOn: string;
            LastName: string;
            MonthOfBirth: number;
            PhotoURL: string;
            ShareClubs: boolean;
            ShareEmail: boolean;
            ShareMyBooks: boolean;
            ShareRatings: boolean;
            ShareReads: boolean;
            ShareReservations: boolean;
            ShareWishlist: boolean;
            Twitter: string;
            UseGravatar: boolean;
            Website: string;
            YearOfBirth: number;
        }

        export interface IChangeRoleRequest {
            Admin: boolean;
            UserId: string;
        }

        export interface IClubSearchRequest {
            Query: string;
        }

        export interface ICollectionResponseClubResponseItem {
            Items: Array<IClubResponseItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IClubResponseItem {
            Id: string;
            ClubName: string;
        }

        export interface IClubGetResponse {
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export class ClubGetResponse implements IClubGetResponse {
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get AddToBoxRuleAsEnum(): ClubGetResponseAddToBoxRule {
                return ClubGetResponseAddToBoxRule[this.AddToBoxRule];
            }

            set AddToBoxRuleAsEnum(value:ClubGetResponseAddToBoxRule) {
                this.AddToBoxRule = ClubGetResponseAddToBoxRule[value];
            }

            get ClubTypeAsEnum(): ClubGetResponseClubType {
                return ClubGetResponseClubType[this.ClubType];
            }

            set ClubTypeAsEnum(value:ClubGetResponseClubType) {
                this.ClubType = ClubGetResponseClubType[value];
            }

            get CommunicationStyleAsEnum(): ClubGetResponseCommunicationStyle {
                return ClubGetResponseCommunicationStyle[this.CommunicationStyle];
            }

            set CommunicationStyleAsEnum(value:ClubGetResponseCommunicationStyle) {
                this.CommunicationStyle = ClubGetResponseCommunicationStyle[value];
            }

            get PrivacyLevelAsEnum(): ClubGetResponsePrivacyLevel {
                return ClubGetResponsePrivacyLevel[this.PrivacyLevel];
            }

            set PrivacyLevelAsEnum(value:ClubGetResponsePrivacyLevel) {
                this.PrivacyLevel = ClubGetResponsePrivacyLevel[value];
            }

            get StyleAsEnum(): ClubGetResponseStyle {
                return ClubGetResponseStyle[this.Style];
            }

            set StyleAsEnum(value:ClubGetResponseStyle) {
                this.Style = ClubGetResponseStyle[value];
            }
        }

        export enum ClubGetResponseAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubGetResponseClubType {
            BookClub
        }

        export enum ClubGetResponseCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubGetResponsePrivacyLevel {
            Public,
            Hidden
        }

        export enum ClubGetResponseStyle {
            SingleRead,
            MultiRead
        }

        export interface IClubUpdateRequest {
            SeeFollowers: boolean;
            SeeMembers: boolean;
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export class ClubUpdateRequest implements IClubUpdateRequest {
            SeeFollowers: boolean;
            SeeMembers: boolean;
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get AddToBoxRuleAsEnum(): ClubUpdateRequestAddToBoxRule {
                return ClubUpdateRequestAddToBoxRule[this.AddToBoxRule];
            }

            set AddToBoxRuleAsEnum(value:ClubUpdateRequestAddToBoxRule) {
                this.AddToBoxRule = ClubUpdateRequestAddToBoxRule[value];
            }

            get ClubStyleAsEnum(): ClubUpdateRequestClubStyle {
                return ClubUpdateRequestClubStyle[this.ClubStyle];
            }

            set ClubStyleAsEnum(value:ClubUpdateRequestClubStyle) {
                this.ClubStyle = ClubUpdateRequestClubStyle[value];
            }

            get CommunicationStyleAsEnum(): ClubUpdateRequestCommunicationStyle {
                return ClubUpdateRequestCommunicationStyle[this.CommunicationStyle];
            }

            set CommunicationStyleAsEnum(value:ClubUpdateRequestCommunicationStyle) {
                this.CommunicationStyle = ClubUpdateRequestCommunicationStyle[value];
            }

            get PrivacyLevelAsEnum(): ClubUpdateRequestPrivacyLevel {
                return ClubUpdateRequestPrivacyLevel[this.PrivacyLevel];
            }

            set PrivacyLevelAsEnum(value:ClubUpdateRequestPrivacyLevel) {
                this.PrivacyLevel = ClubUpdateRequestPrivacyLevel[value];
            }
        }

        export enum ClubUpdateRequestAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubUpdateRequestClubStyle {
            SingleRead,
            MultiRead
        }

        export enum ClubUpdateRequestCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubUpdateRequestPrivacyLevel {
            Public,
            Hidden
        }

        export interface IClubCreateRequest {
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export class ClubCreateRequest implements IClubCreateRequest {
            AddToBoxRule: string;
            CanFollow: boolean;
            ClubStyle: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            Latitude: number;
            Longitude: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            Suburb: string;
            Twitter: string;
            Website: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get AddToBoxRuleAsEnum(): ClubCreateRequestAddToBoxRule {
                return ClubCreateRequestAddToBoxRule[this.AddToBoxRule];
            }

            set AddToBoxRuleAsEnum(value:ClubCreateRequestAddToBoxRule) {
                this.AddToBoxRule = ClubCreateRequestAddToBoxRule[value];
            }

            get ClubStyleAsEnum(): ClubCreateRequestClubStyle {
                return ClubCreateRequestClubStyle[this.ClubStyle];
            }

            set ClubStyleAsEnum(value:ClubCreateRequestClubStyle) {
                this.ClubStyle = ClubCreateRequestClubStyle[value];
            }

            get CommunicationStyleAsEnum(): ClubCreateRequestCommunicationStyle {
                return ClubCreateRequestCommunicationStyle[this.CommunicationStyle];
            }

            set CommunicationStyleAsEnum(value:ClubCreateRequestCommunicationStyle) {
                this.CommunicationStyle = ClubCreateRequestCommunicationStyle[value];
            }

            get PrivacyLevelAsEnum(): ClubCreateRequestPrivacyLevel {
                return ClubCreateRequestPrivacyLevel[this.PrivacyLevel];
            }

            set PrivacyLevelAsEnum(value:ClubCreateRequestPrivacyLevel) {
                this.PrivacyLevel = ClubCreateRequestPrivacyLevel[value];
            }
        }

        export enum ClubCreateRequestAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubCreateRequestClubStyle {
            SingleRead,
            MultiRead
        }

        export enum ClubCreateRequestCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubCreateRequestPrivacyLevel {
            Public,
            Hidden
        }

        export interface ICollectionResponseClubInviteItem {
            Items: Array<IClubInviteItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IClubInviteItem {
            ClubId: string;
            ClubName: string;
            InviteId: string;
            Message: string;
            RecipientFullName: string;
            RecipientId: string;
            Seen: boolean;
            SenderFullName: string;
            SenderId: string;
        }

        export interface IAddClubInviteRequest {
            Message: string;
            UserId: string;
        }

        export interface IClubJoinRequest {
            Club: string;
            Invite: string;
            JustFollow: boolean;
        }

        export interface ICollectionResponseBookItem {
            Items: Array<IBookItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IEventItem {
            City: string;
            ClubId: string;
            ClubName: string;
            Country: string;
            Description: string;
            EndDate: string;
            EventId: string;
            Latitude: number;
            Longitude: number;
            OwnerId: string;
            OwnerName: string;
            Province: string;
            StartDate: string;
            Street1: string;
            Street2: string;
            Street3: string;
            Suburb: string;
            Title: string;
        }

        export interface IEventCreateRequest {
            City: string;
            Country: string;
            Description: string;
            EndDate: string;
            Province: string;
            StartDate: string;
            Street1: string;
            Street2: string;
            Street3: string;
            Suburb: string;
            Title: string;
        }

        export interface ICollectionResponseEventItem {
            Items: Array<IEventItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IForgotPasswordRequest {
            Email: string;
        }

        export interface ICreateGenreAlias {
            Title: string;
        }

        export interface IGenreCreateRequest {
            Name: string;
        }

        export interface ISystemStatus {
            SystemUp: boolean;
            Version: string;
        }

        export interface IOAuthRequest {
            Source: string;
            Token: string;
        }

        export class OAuthRequest implements IOAuthRequest {
            Source: string;
            Token: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get SourceAsEnum(): OAuthRequestSource {
                return OAuthRequestSource[this.Source];
            }

            set SourceAsEnum(value:OAuthRequestSource) {
                this.Source = OAuthRequestSource[value];
            }
        }

        export enum OAuthRequestSource {
            Facebook,
            PIntrest
        }

        export interface IAddRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;
        }

        export class AddRatingRequest implements IAddRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ThingTypeAsEnum(): AddRatingRequestThingType {
                return AddRatingRequestThingType[this.ThingType];
            }

            set ThingTypeAsEnum(value:AddRatingRequestThingType) {
                this.ThingType = AddRatingRequestThingType[value];
            }
        }

        export enum AddRatingRequestThingType {
            Book
        }

        export interface IUpdateRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;
        }

        export class UpdateRatingRequest implements IUpdateRatingRequest {
            Notes: string;
            Rating: number;
            ThingId: string;
            ThingType: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ThingTypeAsEnum(): UpdateRatingRequestThingType {
                return UpdateRatingRequestThingType[this.ThingType];
            }

            set ThingTypeAsEnum(value:UpdateRatingRequestThingType) {
                this.ThingType = UpdateRatingRequestThingType[value];
            }
        }

        export enum UpdateRatingRequestThingType {
            Book
        }

        export interface IRegistrationConfirmRequest {
            Email: string;
            PIN: string;
        }

        export interface ICollectionResponseReservationResponseItem {
            Items: Array<IReservationResponseItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IReservationResponseItem {
            Id: string;
            ReservedOn: string;
            Book: IBook;
            ThingType: string;
            UserHidden: boolean;
            UserId: string;
            UserName: string;
        }

        export class ReservationResponseItem implements IReservationResponseItem {
            Id: string;
            ReservedOn: string;
            Book: IBook;
            ThingType: string;
            UserHidden: boolean;
            UserId: string;
            UserName: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ThingTypeAsEnum(): ReservationResponseItemThingType {
                return ReservationResponseItemThingType[this.ThingType];
            }

            set ThingTypeAsEnum(value:ReservationResponseItemThingType) {
                this.ThingType = ReservationResponseItemThingType[value];
            }
        }

        export enum ReservationResponseItemThingType {
            Book
        }

        export interface IBook {
            Author: string;
            Description: string;
            Genres: Array<IGenre>;
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            ImageId: string;
            ImageBasePath: string;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            State: string;
            SubTitle: string;
            Title: string;
        }

        export class Book implements IBook {
            Author: string;
            Description: string;
            Genres: Array<IGenre>;
            GoodReadsId: string;
            GutenburgId: string;
            Id: string;
            ImageUrl: string;
            ImageId: string;
            ImageBasePath: string;
            ISBN10: string;
            ISBN13: string;
            LCCN: string;
            LibraryThingId: string;
            OCLC: string;
            OpenLibraryId: string;
            State: string;
            SubTitle: string;
            Title: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): BookState {
                return BookState[this.State];
            }

            set StateAsEnum(value:BookState) {
                this.State = BookState[value];
            }
        }

        export enum BookState {
            Active
        }

        export interface IGenre {
            Id: number;
            Name: string;
            State: string;
        }

        export class Genre implements IGenre {
            Id: number;
            Name: string;
            State: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get StateAsEnum(): GenreState {
                return GenreState[this.State];
            }

            set StateAsEnum(value:GenreState) {
                this.State = GenreState[value];
            }
        }

        export enum GenreState {
            Active
        }

        export interface IReserveRequest {
            ResourceId: string;
        }

        export interface IPasswordResetRequest {
            Token: string;
            Password: string;
            PasswordConfirm: string;
        }

        export interface IResourceItem {
            Book: IBookItem;
            Type: string;
        }

        export class ResourceItem implements IResourceItem {
            Book: IBookItem;
            Type: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get TypeAsEnum(): ResourceItemType {
                return ResourceItemType[this.Type];
            }

            set TypeAsEnum(value:ResourceItemType) {
                this.Type = ResourceItemType[value];
            }
        }

        export enum ResourceItemType {
            Book
        }

        export interface IResourceCollection {
            Books: ICollectionResponseBookItem;
        }

        export interface ICollectionResponseRSVPItem {
            Items: Array<IRSVPItem>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IRSVPItem {
            ClubId: string;
            EndDate: string;
            EventId: string;
            Title: string;
            Id: string;
            RSVP: string;
            RSVPOn: string;
            StartDate: string;
            UserId: string;
            UsersName: string;
        }

        export class RSVPItem implements IRSVPItem {
            ClubId: string;
            EndDate: string;
            EventId: string;
            Title: string;
            Id: string;
            RSVP: string;
            RSVPOn: string;
            StartDate: string;
            UserId: string;
            UsersName: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RSVPAsEnum(): RSVPItemRSVP {
                return RSVPItemRSVP[this.RSVP];
            }

            set RSVPAsEnum(value:RSVPItemRSVP) {
                this.RSVP = RSVPItemRSVP[value];
            }
        }

        export enum RSVPItemRSVP {
            Going,
            NotGoing,
            Maybe
        }

        export interface IRSVPRequest {
            EventId: string;
            RSVP: string;
        }

        export class RSVPRequest implements IRSVPRequest {
            EventId: string;
            RSVP: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RSVPAsEnum(): RSVPRequestRSVP {
                return RSVPRequestRSVP[this.RSVP];
            }

            set RSVPAsEnum(value:RSVPRequestRSVP) {
                this.RSVP = RSVPRequestRSVP[value];
            }
        }

        export enum RSVPRequestRSVP {
            Going,
            NotGoing,
            Maybe
        }

        export interface ISystemSettingItem {
            EmailFrom: string;
            LootAffiliateCode: string;
            MaxClubsPerUser: number;
        }

        export interface IEmailItem {
            HTML: string;
            PlainText: string;
            Subject: string;
            Type: string;
        }

        export class EmailItem implements IEmailItem {
            HTML: string;
            PlainText: string;
            Subject: string;
            Type: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get TypeAsEnum(): EmailItemType {
                return EmailItemType[this.Type];
            }

            set TypeAsEnum(value:EmailItemType) {
                this.Type = EmailItemType[value];
            }
        }

        export enum EmailItemType {
            Registration,
            ForgotPassword,
            ClubInvite,
            EventInvite,
            EventUpdate
        }

        export interface ITrendingFilterParameters {
            AgeFilter: boolean;
            DateFilter: boolean;
            EndAgeRange: number;
            EndDateRange: string;
            Limit: number;
            StartAgeRange: number;
            StartDateRange: string;
        }

        export interface ICollectionResponseClubGetUserResponse {
            Items: Array<IClubGetUserResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IClubGetUserResponse {
            RelationshipType: string;
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;
        }

        export class ClubGetUserResponse implements IClubGetUserResponse {
            RelationshipType: string;
            AddToBoxRule: string;
            BookCount: number;
            CanFollow: boolean;
            ClubType: string;
            CommunicationStyle: string;
            Country: string;
            FacebookPage: string;
            FollowerCount: number;
            Id: string;
            MemberCount: number;
            Name: string;
            PrivacyLevel: string;
            Province: string;
            SeeFollowers: boolean;
            SeeMembers: boolean;
            Style: string;
            Suburb: string;
            Twitter: string;
            Website: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get RelationshipTypeAsEnum(): ClubGetUserResponseRelationshipType {
                return ClubGetUserResponseRelationshipType[this.RelationshipType];
            }

            set RelationshipTypeAsEnum(value:ClubGetUserResponseRelationshipType) {
                this.RelationshipType = ClubGetUserResponseRelationshipType[value];
            }

            get AddToBoxRuleAsEnum(): ClubGetUserResponseAddToBoxRule {
                return ClubGetUserResponseAddToBoxRule[this.AddToBoxRule];
            }

            set AddToBoxRuleAsEnum(value:ClubGetUserResponseAddToBoxRule) {
                this.AddToBoxRule = ClubGetUserResponseAddToBoxRule[value];
            }

            get ClubTypeAsEnum(): ClubGetUserResponseClubType {
                return ClubGetUserResponseClubType[this.ClubType];
            }

            set ClubTypeAsEnum(value:ClubGetUserResponseClubType) {
                this.ClubType = ClubGetUserResponseClubType[value];
            }

            get CommunicationStyleAsEnum(): ClubGetUserResponseCommunicationStyle {
                return ClubGetUserResponseCommunicationStyle[this.CommunicationStyle];
            }

            set CommunicationStyleAsEnum(value:ClubGetUserResponseCommunicationStyle) {
                this.CommunicationStyle = ClubGetUserResponseCommunicationStyle[value];
            }

            get PrivacyLevelAsEnum(): ClubGetUserResponsePrivacyLevel {
                return ClubGetUserResponsePrivacyLevel[this.PrivacyLevel];
            }

            set PrivacyLevelAsEnum(value:ClubGetUserResponsePrivacyLevel) {
                this.PrivacyLevel = ClubGetUserResponsePrivacyLevel[value];
            }

            get StyleAsEnum(): ClubGetUserResponseStyle {
                return ClubGetUserResponseStyle[this.Style];
            }

            set StyleAsEnum(value:ClubGetUserResponseStyle) {
                this.Style = ClubGetUserResponseStyle[value];
            }
        }

        export enum ClubGetUserResponseRelationshipType {
            Admin,
            Member,
            Follower
        }

        export enum ClubGetUserResponseAddToBoxRule {
            ClubAdminsOnly,
            AllClubMembers
        }

        export enum ClubGetUserResponseClubType {
            BookClub
        }

        export enum ClubGetUserResponseCommunicationStyle {
            Formal,
            Informal
        }

        export enum ClubGetUserResponsePrivacyLevel {
            Public,
            Hidden
        }

        export enum ClubGetUserResponseStyle {
            SingleRead,
            MultiRead
        }

        export interface ICollectionResponseRatingResponse {
            Items: Array<IRatingResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface ICollectionResponseWishlistResponse {
            Items: Array<IWishlistResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IWishlistResponse {
            Book: IBookItem;
            Type: string;
        }

        export class WishlistResponse implements IWishlistResponse {
            Book: IBookItem;
            Type: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get TypeAsEnum(): WishlistResponseType {
                return WishlistResponseType[this.Type];
            }

            set TypeAsEnum(value:WishlistResponseType) {
                this.Type = WishlistResponseType[value];
            }
        }

        export enum WishlistResponseType {
            Book
        }

        export interface IUserFindRequest {
            Query: string;
        }

        export interface ICollectionResponseUserSearchResponse {
            Items: Array<IUserSearchResponse>;
            Next: string;
            Previous: string;
            TotalCount: number;
        }

        export interface IUserSearchResponse {
            DisplayName: string;
            PhotoUrl: string;
            UserId: string;
        }

        export interface IPhotoUpload {
            Base64Data: string;
        }

        export interface IRegistrationRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            Latitude: number;
            Longitude: number;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            YearOfBirth: number;
        }

        export class RegistrationRequest implements IRegistrationRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            Latitude: number;
            Longitude: number;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            YearOfBirth: number;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get GenderAsEnum(): RegistrationRequestGender {
                return RegistrationRequestGender[this.Gender];
            }

            set GenderAsEnum(value:RegistrationRequestGender) {
                this.Gender = RegistrationRequestGender[value];
            }
        }

        export enum RegistrationRequestGender {
            Male,
            Female,
            Unspecified
        }

        export interface IUserUpdateRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            ShareClubs: boolean;
            ShareEmail: boolean;
            ShareLocation: boolean;
            ShareMyBooks: boolean;
            ShareRatings: boolean;
            ShareReads: boolean;
            ShareReservations: boolean;
            ShareWishlist: boolean;
            Twitter: string;
            UseGravatar: boolean;
            Website: string;
            YearOfBirth: number;
        }

        export class UserUpdateRequest implements IUserUpdateRequest {
            DayOfBirth: number;
            Email: string;
            FirstName: string;
            Gender: string;
            LastName: string;
            MonthOfBirth: number;
            Password: string;
            PasswordConfirm: string;
            ShareClubs: boolean;
            ShareEmail: boolean;
            ShareLocation: boolean;
            ShareMyBooks: boolean;
            ShareRatings: boolean;
            ShareReads: boolean;
            ShareReservations: boolean;
            ShareWishlist: boolean;
            Twitter: string;
            UseGravatar: boolean;
            Website: string;
            YearOfBirth: number;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get GenderAsEnum(): UserUpdateRequestGender {
                return UserUpdateRequestGender[this.Gender];
            }

            set GenderAsEnum(value:UserUpdateRequestGender) {
                this.Gender = UserUpdateRequestGender[value];
            }
        }

        export enum UserUpdateRequestGender {
            Male,
            Female,
            Unspecified
        }

        export interface IWishlistAdd {
            ResourceType: string;
            ThingId: string;
        }

        export class WishlistAdd implements IWishlistAdd {
            ResourceType: string;
            ThingId: string;

            constructor(source?: any) {
                if (source !== undefined) {
                    Object.assign(this, source);
                }
            }

            get ResourceTypeAsEnum(): WishlistAddResourceType {
                return WishlistAddResourceType[this.ResourceType];
            }

            set ResourceTypeAsEnum(value:WishlistAddResourceType) {
                this.ResourceType = WishlistAddResourceType[value];
            }
        }

        export enum WishlistAddResourceType {
            Book
        }

        export interface IAuth_PostResendRegistrationPinRequest {
            request: IResendPinRequest;
        }

        export interface IAuth_PostRequest {
            request: IAuthRequest;
        }

        export interface IBook_GetBookAdminRequest {
            id: string;
            height?: number;
            width?: number;
        }

        export interface IBook_GetRatingsRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IBook_GetTop10Request {
            height?: number;
            width?: number;
        }

        export interface IBook_PostRequest {
            request: IAddBookToRequest;
            height?: number;
            width?: number;
        }

        export interface IBook_GetRequest {
            latitude?: number;
            longitude?: number;
            query?: string;
            height?: number;
            width?: number;
        }

        export interface IBook_PostAdminRequest {
            request: IBookCreateRequest;
        }

        export interface IBook_PutBookUpdateAdminRequest {
            id: string;
            request: IBookCreateRequest;
        }

        export interface IBookRead_DeleteReadRequest {
            id: string;
        }

        export interface IBookRead_GetSingleReadRequest {
            id: string;
            height?: number;
            width?: number;
        }

        export interface IBookRead_GetRequest {
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IBookRead_PostReadRequest {
            id: string;
            location: IPosition;
        }

        export interface IClub_GetMembersRequest {
            id: string;
            memberType?: string;
            excludeSelf?: boolean;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IClub_GetTop10Request {
            id: string;
            height?: number;
            width?: number;
        }

        export interface IClub_PostChangeUsersRoleRequest {
            id: string;
            changeRoleRequest: IChangeRoleRequest;
        }

        export interface IClub_PostRemoveUserFromClubRequest {
            id: string;
            userId: string;
        }

        export interface IClub_PostSearchRequest {
            request: IClubSearchRequest;
            skip?: number;
            top?: number;
        }

        export interface IClub_DeleteRequest {
            id: string;
        }

        export interface IClub_GetRequest {
            id: string;
        }

        export interface IClub_PutRequest {
            id: string;
            request: IClubUpdateRequest;
        }

        export interface IClub_PostRequest {
            request: IClubCreateRequest;
        }

        export interface IClubInvite_DeleteRequest {
            id: string;
            inviteid: string;
        }

        export interface IClubInvite_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IClubInvite_PostRequest {
            id: string;
            request: IAddClubInviteRequest;
        }

        export interface IClubJoin_DeleteRequest {
            id: string;
        }

        export interface IClubJoin_PostRequest {
            request: IClubJoinRequest;
        }

        export interface IClubMember_GetMembersBooksRequest {
            clubId: string;
            memberId: string;
            filter?: string;
            height?: number;
            width?: number;
            skip?: number;
            top?: number;
        }

        export interface IEvent_DeleteRequest {
            id: string;
            eventid: string;
        }

        export interface IEvent_GetSingleEventRequest {
            id: string;
            eventid: string;
        }

        export interface IEvent_PutRequest {
            id: string;
            eventid: string;
            request: IEventCreateRequest;
        }

        export interface IEvent_GetEventsRequest {
            id: string;
            eventStartRangeBegin?: string;
            eventStartRangeEnd?: string;
            skip?: number;
            top?: number;
        }

        export interface IEvent_PostRequest {
            id: string;
            request: IEventCreateRequest;
        }

        export interface IEvent_PostAddInviteRequest {
            id: string;
            eventid: string;
            userId: string;
        }

        export interface IForgotPassword_PostRequest {
            request: IForgotPasswordRequest;
        }

        export interface IGenres_DeleteAliasRequest {
            id: number;
            aliasId: number;
        }

        export interface IGenres_DeleteGenreToBookRequest {
            bookId: string;
            id: number;
        }

        export interface IGenres_PostAddGenreToBookRequest {
            bookId: string;
            id: number;
        }

        export interface IGenres_PostAliasRequest {
            id: number;
            request: ICreateGenreAlias;
        }

        export interface IGenres_DeleteRequest {
            id: number;
        }

        export interface IGenres_PutRequest {
            id: number;
            request: IGenreCreateRequest;
        }

        export interface IGenres_GetRequest {
            skip?: number;
            top?: number;
        }

        export interface IGenres_PostRequest {
            request: IGenreCreateRequest;
        }

        export interface IOAuth_PostRequest {
            request: IOAuthRequest;
        }

        export interface IRating_DeleteRequest {
            id: number;
        }

        export interface IRating_PostRequest {
            request: IAddRatingRequest;
        }

        export interface IRating_PutRequest {
            request: IUpdateRatingRequest;
        }

        export interface IRegistrationConfirm_PostRequest {
            request: IRegistrationConfirmRequest;
        }

        export interface IReserve_DeleteRequest {
            id: string;
        }

        export interface IReserve_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IReserve_PostRequest {
            request: IReserveRequest;
        }

        export interface IReservedName_DeleteRequest {
            id: number;
        }

        export interface IReservedName_GetRequest {
            id: number;
        }

        export interface IReservedName_PutRequest {
            id: number;
            title: string;
        }

        export interface IReservedName_PostRequest {
            title: string;
        }

        export interface IResetPassword_PostRequest {
            request: IPasswordResetRequest;
        }

        export interface IResource_PostCheckinResourceRequest {
            id: string;
            resourceId: string;
        }

        export interface IResource_DeleteRequest {
            id: string;
            resourceId: string;
        }

        export interface IResource_GetResourceRequest {
            id: string;
            resourceId: string;
            height?: number;
            width?: number;
        }

        export interface IResource_PostAddResourceToClubRequest {
            id: string;
            resourceId: string;
        }

        export interface IResource_DeleteFromUserRequest {
            resourceId: string;
        }

        export interface IResource_GetRequest {
            id: string;
            resourceType?: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IResource_GetUserResourceRequest {
            resourceId: string;
            height?: number;
            width?: number;
        }

        export interface IResource_PostCheckoutResourceRequest {
            id: string;
            resourceId: string;
        }

        export interface IRSVP_GetRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IRSVP_PostRequest {
            request: IRSVPRequest;
        }

        export interface ISystem_DeleteQuoteRequest {
            id: number;
        }

        export interface ISystem_PostQuoteRequest {
            content: string;
        }

        export interface ISystem_PostRequest {
            request: ISystemSettingItem;
        }

        export interface ISystem_GetSystemEmailRequest {
            type: string;
        }

        export interface ISystem_PutSystemEmailRequest {
            request: IEmailItem;
        }

        export interface ITrending_GetClubTrendingRequest {
            id: string;
            ageFilter?: boolean;
            dateFilter?: boolean;
            endAgeRange?: number;
            endDateRange?: string;
            limit?: number;
            startAgeRange?: number;
            startDateRange?: string;
            height?: number;
            width?: number;
        }

        export interface ITrending_GetTrendingRequest {
            ageFilter?: boolean;
            dateFilter?: boolean;
            endAgeRange?: number;
            endDateRange?: string;
            limit?: number;
            startAgeRange?: number;
            startDateRange?: string;
            height?: number;
            width?: number;
        }

        export interface IUser_DeleteClubInviteRequest {
            inviteid: string;
        }

        export interface IUser_PutEventInviteRequest {
            inviteid: string;
        }

        export interface IUser_DeleteEventInviteRequest {
            eventId: string;
        }

        export interface IUser_GetBooksRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_GetClubsRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_GetClubsForSpecifiedUserRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IUser_GetEventsRequest {
            eventStartRangeBegin?: string;
            eventStartRangeEnd?: string;
            skip?: number;
            top?: number;
        }

        export interface IUser_GetInvitesRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_GetMyEventInviteRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_GetMyReservationsRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_GetRatingsRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IUser_GetReadBooksRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IUser_GetSpecificUsersBooksRequest {
            id: string;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IUser_GetSpecificUsersReservationsRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IUser_GetSpecifiedUserRequest {
            userId: string;
            height?: number;
            width?: number;
        }

        export interface IUser_GetSpecifiedWishlistRequest {
            id: string;
            skip?: number;
            top?: number;
        }

        export interface IUser_GetWishlistRequest {
            skip?: number;
            top?: number;
        }

        export interface IUser_PostFindUserRequest {
            request: IUserFindRequest;
            skip?: number;
            top?: number;
            height?: number;
            width?: number;
        }

        export interface IUser_PostPhotoRequest {
            photo: IPhotoUpload;
        }

        export interface IUser_GetRequest {
            height?: number;
            width?: number;
        }

        export interface IUser_PostRequest {
            request: IRegistrationRequest;
        }

        export interface IUser_PutRequest {
            request: IUserUpdateRequest;
        }

        export interface IWishlist_DeleteRequest {
            id: string;
        }

        export interface IWishlist_PostRequest {
            request: IWishlistAdd;
        }

        export interface API {
            setToken(value: string, headerOrQueryName: string, isQuery: boolean): void;
            Auth_PostResendRegistrationPin(parameters: IAuth_PostResendRegistrationPinRequest): PromiseLike<void>;
            Auth_Post(parameters: IAuth_PostRequest): PromiseLike<string>;
            Book_GetBookAdmin(parameters: IBook_GetBookAdminRequest): PromiseLike<IBookItem>;
            Book_GetRatings(parameters: IBook_GetRatingsRequest): PromiseLike<ICumulitiveRatingResponse>;
            Book_GetTop10(parameters?: IBook_GetTop10Request): PromiseLike<Array<ITop10ResponseItem>>;
            Book_Post(parameters: IBook_PostRequest): PromiseLike<IBookItem>;
            Book_Get(parameters?: IBook_GetRequest): PromiseLike<Array<IBookItem>>;
            Book_PostAdmin(parameters: IBook_PostAdminRequest): PromiseLike<string>;
            Book_PutBookUpdateAdmin(parameters: IBook_PutBookUpdateAdminRequest): PromiseLike<string>;
            BookRead_DeleteRead(parameters: IBookRead_DeleteReadRequest): PromiseLike<void>;
            BookRead_GetSingleRead(parameters: IBookRead_GetSingleReadRequest): PromiseLike<IReadResponseItem>;
            BookRead_Get(parameters?: IBookRead_GetRequest): PromiseLike<ICollectionResponseReadResponseItem>;
            BookRead_PostRead(parameters: IBookRead_PostReadRequest): PromiseLike<void>;
            Club_GetMembers(parameters: IClub_GetMembersRequest): PromiseLike<ICollectionResponseClubGetMemberResponse>;
            Club_GetTop10(parameters: IClub_GetTop10Request): PromiseLike<Array<ITop10ResponseItem>>;
            Club_PostChangeUsersRole(parameters: IClub_PostChangeUsersRoleRequest): PromiseLike<void>;
            Club_PostRemoveUserFromClub(parameters: IClub_PostRemoveUserFromClubRequest): PromiseLike<void>;
            Club_PostSearch(parameters: IClub_PostSearchRequest): PromiseLike<ICollectionResponseClubResponseItem>;
            Club_Delete(parameters: IClub_DeleteRequest): PromiseLike<void>;
            Club_Get(parameters: IClub_GetRequest): PromiseLike<IClubGetResponse>;
            Club_Put(parameters: IClub_PutRequest): PromiseLike<void>;
            Club_Post(parameters: IClub_PostRequest): PromiseLike<string>;
            ClubInvite_Delete(parameters: IClubInvite_DeleteRequest): PromiseLike<void>;
            ClubInvite_Get(parameters: IClubInvite_GetRequest): PromiseLike<ICollectionResponseClubInviteItem>;
            ClubInvite_Post(parameters: IClubInvite_PostRequest): PromiseLike<void>;
            ClubJoin_Delete(parameters: IClubJoin_DeleteRequest): PromiseLike<void>;
            ClubJoin_Post(parameters: IClubJoin_PostRequest): PromiseLike<void>;
            ClubMember_GetMembersBooks(parameters: IClubMember_GetMembersBooksRequest): PromiseLike<ICollectionResponseBookItem>;
            Event_Delete(parameters: IEvent_DeleteRequest): PromiseLike<void>;
            Event_GetSingleEvent(parameters: IEvent_GetSingleEventRequest): PromiseLike<IEventItem>;
            Event_Put(parameters: IEvent_PutRequest): PromiseLike<void>;
            Event_GetEvents(parameters: IEvent_GetEventsRequest): PromiseLike<ICollectionResponseEventItem>;
            Event_Post(parameters: IEvent_PostRequest): PromiseLike<void>;
            Event_PostAddInvite(parameters: IEvent_PostAddInviteRequest): PromiseLike<void>;
            ForgotPassword_Post(parameters: IForgotPassword_PostRequest): PromiseLike<void>;
            Genres_DeleteAlias(parameters: IGenres_DeleteAliasRequest): PromiseLike<void>;
            Genres_DeleteGenreToBook(parameters: IGenres_DeleteGenreToBookRequest): PromiseLike<number>;
            Genres_PostAddGenreToBook(parameters: IGenres_PostAddGenreToBookRequest): PromiseLike<number>;
            Genres_PostAlias(parameters: IGenres_PostAliasRequest): PromiseLike<number>;
            Genres_Delete(parameters: IGenres_DeleteRequest): PromiseLike<void>;
            Genres_Put(parameters: IGenres_PutRequest): PromiseLike<void>;
            Genres_Get(parameters?: IGenres_GetRequest): PromiseLike<Array<IGenreResponseItem>>;
            Genres_Post(parameters: IGenres_PostRequest): PromiseLike<number>;
            Health_Get(): PromiseLike<ISystemStatus>;
            Logout_Post(): PromiseLike<void>;
            OAuth_Post(parameters: IOAuth_PostRequest): PromiseLike<void>;
            Quote_Get(): PromiseLike<string>;
            Rating_Delete(parameters: IRating_DeleteRequest): PromiseLike<void>;
            Rating_Post(parameters: IRating_PostRequest): PromiseLike<void>;
            Rating_Put(parameters: IRating_PutRequest): PromiseLike<void>;
            RegistrationConfirm_Post(parameters: IRegistrationConfirm_PostRequest): PromiseLike<void>;
            Reserve_Delete(parameters: IReserve_DeleteRequest): PromiseLike<void>;
            Reserve_Get(parameters: IReserve_GetRequest): PromiseLike<ICollectionResponseReservationResponseItem>;
            Reserve_Post(parameters: IReserve_PostRequest): PromiseLike<void>;
            ReservedName_Delete(parameters: IReservedName_DeleteRequest): PromiseLike<void>;
            ReservedName_Get(parameters: IReservedName_GetRequest): PromiseLike<string>;
            ReservedName_Put(parameters: IReservedName_PutRequest): PromiseLike<void>;
            ReservedName_Get(): PromiseLike<any>;
            ReservedName_Post(parameters: IReservedName_PostRequest): PromiseLike<void>;
            ResetPassword_Post(parameters: IResetPassword_PostRequest): PromiseLike<void>;
            Resource_PostCheckinResource(parameters: IResource_PostCheckinResourceRequest): PromiseLike<void>;
            Resource_Delete(parameters: IResource_DeleteRequest): PromiseLike<void>;
            Resource_GetResource(parameters: IResource_GetResourceRequest): PromiseLike<IResourceItem>;
            Resource_PostAddResourceToClub(parameters: IResource_PostAddResourceToClubRequest): PromiseLike<void>;
            Resource_DeleteFromUser(parameters: IResource_DeleteFromUserRequest): PromiseLike<void>;
            Resource_Get(parameters: IResource_GetRequest): PromiseLike<IResourceCollection>;
            Resource_GetUserResource(parameters: IResource_GetUserResourceRequest): PromiseLike<IResourceItem>;
            Resource_PostCheckoutResource(parameters: IResource_PostCheckoutResourceRequest): PromiseLike<void>;
            RSVP_Get(parameters: IRSVP_GetRequest): PromiseLike<ICollectionResponseRSVPItem>;
            RSVP_Post(parameters: IRSVP_PostRequest): PromiseLike<void>;
            System_DeleteQuote(parameters: ISystem_DeleteQuoteRequest): PromiseLike<any>;
            System_GetQuotes(): PromiseLike<any>;
            System_PostQuote(parameters: ISystem_PostQuoteRequest): PromiseLike<any>;
            System_Get(): PromiseLike<ISystemSettingItem>;
            System_Post(parameters: ISystem_PostRequest): PromiseLike<void>;
            System_GetSystemEmail(parameters: ISystem_GetSystemEmailRequest): PromiseLike<any>;
            System_GetSystemEmails(): PromiseLike<any>;
            System_PutSystemEmail(parameters: ISystem_PutSystemEmailRequest): PromiseLike<any>;
            Trending_GetClubTrending(parameters: ITrending_GetClubTrendingRequest): PromiseLike<Array<IBookItem>>;
            Trending_GetTrending(parameters?: ITrending_GetTrendingRequest): PromiseLike<Array<IBookItem>>;
            User_DeleteClubInvite(parameters: IUser_DeleteClubInviteRequest): PromiseLike<void>;
            User_PutEventInvite(parameters: IUser_PutEventInviteRequest): PromiseLike<void>;
            User_DeleteEventInvite(parameters: IUser_DeleteEventInviteRequest): PromiseLike<void>;
            User_GetBooks(parameters?: IUser_GetBooksRequest): PromiseLike<ICollectionResponseBookItem>;
            User_GetClubs(parameters?: IUser_GetClubsRequest): PromiseLike<ICollectionResponseClubGetUserResponse>;
            User_GetClubsForSpecifiedUser(parameters: IUser_GetClubsForSpecifiedUserRequest): PromiseLike<ICollectionResponseClubGetUserResponse>;
            User_GetEvents(parameters?: IUser_GetEventsRequest): PromiseLike<ICollectionResponseRSVPItem>;
            User_GetInvites(parameters?: IUser_GetInvitesRequest): PromiseLike<ICollectionResponseClubInviteItem>;
            User_GetMyEventInvite(parameters?: IUser_GetMyEventInviteRequest): PromiseLike<ICollectionResponseEventItem>;
            User_GetMyReservations(parameters?: IUser_GetMyReservationsRequest): PromiseLike<Array<IReservationResponseItem>>;
            User_GetRatings(parameters: IUser_GetRatingsRequest): PromiseLike<ICollectionResponseRatingResponse>;
            User_GetRatings(parameters?: IUser_GetRatingsRequest): PromiseLike<ICollectionResponseRatingResponse>;
            User_GetReadBooks(parameters: IUser_GetReadBooksRequest): PromiseLike<ICollectionResponseReadResponseItem>;
            User_GetSpecificUsersBooks(parameters: IUser_GetSpecificUsersBooksRequest): PromiseLike<ICollectionResponseBookItem>;
            User_GetSpecificUsersReservations(parameters: IUser_GetSpecificUsersReservationsRequest): PromiseLike<ICollectionResponseReservationResponseItem>;
            User_GetSpecifiedUser(parameters: IUser_GetSpecifiedUserRequest): PromiseLike<IUserResponse>;
            User_GetSpecifiedWishlist(parameters: IUser_GetSpecifiedWishlistRequest): PromiseLike<ICollectionResponseWishlistResponse>;
            User_GetWishlist(parameters?: IUser_GetWishlistRequest): PromiseLike<ICollectionResponseWishlistResponse>;
            User_PostFindUser(parameters: IUser_PostFindUserRequest): PromiseLike<ICollectionResponseUserSearchResponse>;
            User_PostPhoto(parameters: IUser_PostPhotoRequest): PromiseLike<void>;
            User_Get(parameters?: IUser_GetRequest): PromiseLike<IUserResponse>;
            User_Post(parameters: IUser_PostRequest): PromiseLike<void>;
            User_Put(parameters: IUser_PutRequest): PromiseLike<void>;
            Wishlist_Delete(parameters: IWishlist_DeleteRequest): PromiseLike<void>;
            Wishlist_Post(parameters: IWishlist_PostRequest): PromiseLike<string>;
        }
    }
}
